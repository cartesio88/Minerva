#define YY_MSLParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from Kernel/MSLParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_MSLParser_LSP_NEEDED 
#define YY_MSLParser_MEMBERS \
	virtual ~MSLParser(){}\
	private:\
		yyFlexLexer lexer;\
		MAO* currentMAO;
#define YY_MSLParser_LEX_BODY  {return lexer.yylex();}
#define YY_MSLParser_ERROR_BODY  {std::cout <<std::endl<<"~ MSL Error Reporting ~"<<std::endl;\
					std::cout<< "-----------------------"<<std::endl;\
					std::cout<< "Error encountered at line: "<<lexer.lineno()<<std::endl;\
					std::cout<< "Last symbol parsed: "<<lexer.YYText()<<std::endl;\
					std::cout<< "Exiting..."<<std::endl;\
					exit(-1);\
					}
#line 22 "Kernel/MSLParser.y"

#include <cstdlib>
#include <FlexLexer.h>
#include <opencv/cv.h>
#include <btBulletDynamicsCommon.h>

#include <Kernel/MSLProperties.h>
#include <Factories/MAOFactory.h>
#include <Factories/MLBFactory.h>
#include <Kernel/Logger.h>


#line 39 "Kernel/MSLParser.y"
typedef union {
	int int_type;
	bool bool_type;
	float float_type;
	std::string* string_type;
	cv::Mat* pose_type;
	MSLProperties* param_type;
	btVector3* vector3_type;
	MAOValue* maovalue_type;
	MAOProperty* maoproperty_type;
	std::vector<std::string*>* vectorstr_type;
} yy_MSLParser_stype;
#define YY_MSLParser_STYPE yy_MSLParser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_MSLParser_BISON 1

#ifndef YY_MSLParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_MSLParser_COMPATIBILITY 1
 #else
  #define  YY_MSLParser_COMPATIBILITY 0
 #endif
#endif

#if YY_MSLParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_MSLParser_LTYPE
   #define YY_MSLParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_MSLParser_STYPE 
   #define YY_MSLParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_MSLParser_DEBUG
   #define  YY_MSLParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_MSLParser_USE_GOTO
  #define YY_MSLParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_MSLParser_USE_GOTO
 #define YY_MSLParser_USE_GOTO 0
#endif

#ifndef YY_MSLParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_MSLParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_MSLParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_MSLParser_DEBUG */
#endif


#ifndef YY_MSLParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_MSLParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_MSLParser_LSP_NEEDED
#ifndef YY_MSLParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_MSLParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_MSLParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_MSLParser_STYPE
#define YY_MSLParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_MSLParser_PARSE
#define YY_MSLParser_PARSE yyparse
#endif
#ifndef YY_MSLParser_LEX
#define YY_MSLParser_LEX yylex
#endif
#ifndef YY_MSLParser_LVAL
#define YY_MSLParser_LVAL yylval
#endif
#ifndef YY_MSLParser_LLOC
#define YY_MSLParser_LLOC yylloc
#endif
#ifndef YY_MSLParser_CHAR
#define YY_MSLParser_CHAR yychar
#endif
#ifndef YY_MSLParser_NERRS
#define YY_MSLParser_NERRS yynerrs
#endif
#ifndef YY_MSLParser_DEBUG_FLAG
#define YY_MSLParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_MSLParser_ERROR
#define YY_MSLParser_ERROR yyerror
#endif

#ifndef YY_MSLParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_MSLParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_MSLParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_MSLParser_PARSE_PARAM
  #define YY_MSLParser_PARSE_PARAM void
 #endif
#endif

#if YY_MSLParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_MSLParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_MSLParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_MSLParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_MSLParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_MSLParser_PURE
#  endif
#endif

#ifdef YY_MSLParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_MSLParser_DEBUG 
#  endif
#endif

#ifndef YY_MSLParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_MSLParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_MSLParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_MSLParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	INTEGER	258
#define	T_INTEGER	259
#define	FLOAT	260
#define	T_FLOAT	261
#define	STRING	262
#define	T_STRING	263
#define	BOOL	264
#define	T_BOOL	265
#define	T_POSE	266
#define	IDENTIFIER	267
#define	ARROW	268
#define	DOT	269
#define	PARAM_NAME	270
#define	PARAM_PATH	271
#define	PARAM_SIZE	272
#define	PARAM_MARKS	273
#define	PARAM_POS	274
#define	PARAM_COLOR	275
#define	PARAM_WIDTH	276
#define	PARAM_HEIGHT	277
#define	PARAM_TEXT	278
#define	PARAM_PATH_ORJ	279
#define	PARAM_PATH_TEX	280
#define	PARAM_ANIM_TYPE	281
#define	PARAM_REFERENCE	282
#define	PARAM_MAO	283
#define	PARAM_TIME	284
#define	PARAM_OFFSET	285
#define	PARAM_IMPULSE	286
#define	PARAM_ANG_AXIS	287
#define	PARAM_PROPERTY	288
#define	PARAM_ROT_TYPE	289
#define	PARAM_LOC_TYPE	290
#define	PARAM_ROTATION	291
#define	PARAM_LOCATION	292
#define	PARAM_TYPE	293
#define	PARAM_VALUE	294
#define	PARAM_VALUE1	295
#define	PARAM_VALUE2	296
#define	PARAM_ACTUATOR	297
#define	PARAM_KEY	298
#define	PARAM_DISTANCE	299
#define	PARAM_PROBABILITY	300
#define	PARAM_INVERSE	301
#define	PARAM_GRAVITY	302
#define	PARAM_AXIS	303
#define	PARAM_MASS	304
#define	PARAM_SHAPE	305
#define	PARAM_SHADOWS	306
#define	PARAM_SUN	307
#define	MAOWORLD	308
#define	MAOMARK	309
#define	MAOMARKSGROUP	310
#define	MAORENDERABLE2DIMAGE	311
#define	MAORENDERABLE2DTEXT	312
#define	MAORENDERABLE3DLINE	313
#define	MAORENDERABLE3DORJ	314
#define	MAORENDERABLE3DPATH	315
#define	MAORENDERABLE3DTEAPOT	316
#define	MLBACTUATORADDDYNAMICOBJECT	317
#define	MLBACTUATORANG	318
#define	MLBACTUATORCHANGEPOSE	319
#define	MLBACTUATORDISTANCE	320
#define	MLBACTUATORPATHADDPOINT	321
#define	MLBACTUATORPATHREMOVEPOINTS	322
#define	MLBACTUATORPROPERTY	323
#define	MLBACTUATORQUITAPP	324
#define	MLBACTUATORRANDOM	325
#define	MLBACTUATORRELATIVEPOSE	326
#define	MLBACTUATORSOUND	327
#define	MLBACTUATORVISIBILITY	328
#define	MLBACTUATORANIMOREJ	329
#define	MLBCONTROLLERAND	330
#define	MLBCONTROLLERNAND	331
#define	MLBCONTROLLERNOR	332
#define	MLBCONTROLLEROR	333
#define	MLBCONTROLLERSCRIPT	334
#define	MLBSENSORACTUATOR	335
#define	MLBSENSORALWAYS	336
#define	MLBSENSORCOLLISION	337
#define	MLBSENSORDELAY	338
#define	MLBSENSORKEYBOARD	339
#define	MLBSENSORNEAR	340
#define	MLBSENSORPROPERTY	341
#define	MLBSENSORRANDOM	342
#define	GROUND	343
#define	DYNAMICOBJECT	344
#define	STATICOBJECT	345


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_MSLParser_CLASS
#define YY_MSLParser_CLASS MSLParser
#endif
#ifndef YY_MSLParser_INHERIT
#define YY_MSLParser_INHERIT
#endif
#ifndef YY_MSLParser_MEMBERS
#define YY_MSLParser_MEMBERS 
#endif
#ifndef YY_MSLParser_LEX_BODY
#define YY_MSLParser_LEX_BODY  
#endif
#ifndef YY_MSLParser_ERROR_BODY
#define YY_MSLParser_ERROR_BODY  
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_PARAM
#define YY_MSLParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_CODE
#define YY_MSLParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_INIT
#define YY_MSLParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_MSLParser_USE_CONST_TOKEN
#define YY_MSLParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_MSLParser_USE_CONST_TOKEN != 0
#ifndef YY_MSLParser_ENUM_TOKEN
#define YY_MSLParser_ENUM_TOKEN yy_MSLParser_enum_token
#endif
#endif

class YY_MSLParser_CLASS YY_MSLParser_INHERIT
{
public: 
#if YY_MSLParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int INTEGER;
static const int T_INTEGER;
static const int FLOAT;
static const int T_FLOAT;
static const int STRING;
static const int T_STRING;
static const int BOOL;
static const int T_BOOL;
static const int T_POSE;
static const int IDENTIFIER;
static const int ARROW;
static const int DOT;
static const int PARAM_NAME;
static const int PARAM_PATH;
static const int PARAM_SIZE;
static const int PARAM_MARKS;
static const int PARAM_POS;
static const int PARAM_COLOR;
static const int PARAM_WIDTH;
static const int PARAM_HEIGHT;
static const int PARAM_TEXT;
static const int PARAM_PATH_ORJ;
static const int PARAM_PATH_TEX;
static const int PARAM_ANIM_TYPE;
static const int PARAM_REFERENCE;
static const int PARAM_MAO;
static const int PARAM_TIME;
static const int PARAM_OFFSET;
static const int PARAM_IMPULSE;
static const int PARAM_ANG_AXIS;
static const int PARAM_PROPERTY;
static const int PARAM_ROT_TYPE;
static const int PARAM_LOC_TYPE;
static const int PARAM_ROTATION;
static const int PARAM_LOCATION;
static const int PARAM_TYPE;
static const int PARAM_VALUE;
static const int PARAM_VALUE1;
static const int PARAM_VALUE2;
static const int PARAM_ACTUATOR;
static const int PARAM_KEY;
static const int PARAM_DISTANCE;
static const int PARAM_PROBABILITY;
static const int PARAM_INVERSE;
static const int PARAM_GRAVITY;
static const int PARAM_AXIS;
static const int PARAM_MASS;
static const int PARAM_SHAPE;
static const int PARAM_SHADOWS;
static const int PARAM_SUN;
static const int MAOWORLD;
static const int MAOMARK;
static const int MAOMARKSGROUP;
static const int MAORENDERABLE2DIMAGE;
static const int MAORENDERABLE2DTEXT;
static const int MAORENDERABLE3DLINE;
static const int MAORENDERABLE3DORJ;
static const int MAORENDERABLE3DPATH;
static const int MAORENDERABLE3DTEAPOT;
static const int MLBACTUATORADDDYNAMICOBJECT;
static const int MLBACTUATORANG;
static const int MLBACTUATORCHANGEPOSE;
static const int MLBACTUATORDISTANCE;
static const int MLBACTUATORPATHADDPOINT;
static const int MLBACTUATORPATHREMOVEPOINTS;
static const int MLBACTUATORPROPERTY;
static const int MLBACTUATORQUITAPP;
static const int MLBACTUATORRANDOM;
static const int MLBACTUATORRELATIVEPOSE;
static const int MLBACTUATORSOUND;
static const int MLBACTUATORVISIBILITY;
static const int MLBACTUATORANIMOREJ;
static const int MLBCONTROLLERAND;
static const int MLBCONTROLLERNAND;
static const int MLBCONTROLLERNOR;
static const int MLBCONTROLLEROR;
static const int MLBCONTROLLERSCRIPT;
static const int MLBSENSORACTUATOR;
static const int MLBSENSORALWAYS;
static const int MLBSENSORCOLLISION;
static const int MLBSENSORDELAY;
static const int MLBSENSORKEYBOARD;
static const int MLBSENSORNEAR;
static const int MLBSENSORPROPERTY;
static const int MLBSENSORRANDOM;
static const int GROUND;
static const int DYNAMICOBJECT;
static const int STATICOBJECT;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_MSLParser_ENUM_TOKEN { YY_MSLParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,INTEGER=258
	,T_INTEGER=259
	,FLOAT=260
	,T_FLOAT=261
	,STRING=262
	,T_STRING=263
	,BOOL=264
	,T_BOOL=265
	,T_POSE=266
	,IDENTIFIER=267
	,ARROW=268
	,DOT=269
	,PARAM_NAME=270
	,PARAM_PATH=271
	,PARAM_SIZE=272
	,PARAM_MARKS=273
	,PARAM_POS=274
	,PARAM_COLOR=275
	,PARAM_WIDTH=276
	,PARAM_HEIGHT=277
	,PARAM_TEXT=278
	,PARAM_PATH_ORJ=279
	,PARAM_PATH_TEX=280
	,PARAM_ANIM_TYPE=281
	,PARAM_REFERENCE=282
	,PARAM_MAO=283
	,PARAM_TIME=284
	,PARAM_OFFSET=285
	,PARAM_IMPULSE=286
	,PARAM_ANG_AXIS=287
	,PARAM_PROPERTY=288
	,PARAM_ROT_TYPE=289
	,PARAM_LOC_TYPE=290
	,PARAM_ROTATION=291
	,PARAM_LOCATION=292
	,PARAM_TYPE=293
	,PARAM_VALUE=294
	,PARAM_VALUE1=295
	,PARAM_VALUE2=296
	,PARAM_ACTUATOR=297
	,PARAM_KEY=298
	,PARAM_DISTANCE=299
	,PARAM_PROBABILITY=300
	,PARAM_INVERSE=301
	,PARAM_GRAVITY=302
	,PARAM_AXIS=303
	,PARAM_MASS=304
	,PARAM_SHAPE=305
	,PARAM_SHADOWS=306
	,PARAM_SUN=307
	,MAOWORLD=308
	,MAOMARK=309
	,MAOMARKSGROUP=310
	,MAORENDERABLE2DIMAGE=311
	,MAORENDERABLE2DTEXT=312
	,MAORENDERABLE3DLINE=313
	,MAORENDERABLE3DORJ=314
	,MAORENDERABLE3DPATH=315
	,MAORENDERABLE3DTEAPOT=316
	,MLBACTUATORADDDYNAMICOBJECT=317
	,MLBACTUATORANG=318
	,MLBACTUATORCHANGEPOSE=319
	,MLBACTUATORDISTANCE=320
	,MLBACTUATORPATHADDPOINT=321
	,MLBACTUATORPATHREMOVEPOINTS=322
	,MLBACTUATORPROPERTY=323
	,MLBACTUATORQUITAPP=324
	,MLBACTUATORRANDOM=325
	,MLBACTUATORRELATIVEPOSE=326
	,MLBACTUATORSOUND=327
	,MLBACTUATORVISIBILITY=328
	,MLBACTUATORANIMOREJ=329
	,MLBCONTROLLERAND=330
	,MLBCONTROLLERNAND=331
	,MLBCONTROLLERNOR=332
	,MLBCONTROLLEROR=333
	,MLBCONTROLLERSCRIPT=334
	,MLBSENSORACTUATOR=335
	,MLBSENSORALWAYS=336
	,MLBSENSORCOLLISION=337
	,MLBSENSORDELAY=338
	,MLBSENSORKEYBOARD=339
	,MLBSENSORNEAR=340
	,MLBSENSORPROPERTY=341
	,MLBSENSORRANDOM=342
	,GROUND=343
	,DYNAMICOBJECT=344
	,STATICOBJECT=345


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_MSLParser_PARSE (YY_MSLParser_PARSE_PARAM);
 virtual void YY_MSLParser_ERROR(char *msg) YY_MSLParser_ERROR_BODY;
#ifdef YY_MSLParser_PURE
#ifdef YY_MSLParser_LSP_NEEDED
 virtual int  YY_MSLParser_LEX (YY_MSLParser_STYPE *YY_MSLParser_LVAL,YY_MSLParser_LTYPE *YY_MSLParser_LLOC) YY_MSLParser_LEX_BODY;
#else
 virtual int  YY_MSLParser_LEX (YY_MSLParser_STYPE *YY_MSLParser_LVAL) YY_MSLParser_LEX_BODY;
#endif
#else
 virtual int YY_MSLParser_LEX() YY_MSLParser_LEX_BODY;
 YY_MSLParser_STYPE YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
 YY_MSLParser_LTYPE YY_MSLParser_LLOC;
#endif
 int   YY_MSLParser_NERRS;
 int    YY_MSLParser_CHAR;
#endif
#if YY_MSLParser_DEBUG != 0
 int YY_MSLParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_MSLParser_CLASS(YY_MSLParser_CONSTRUCTOR_PARAM);
public:
 YY_MSLParser_MEMBERS 
};
/* other declare folow */
#if YY_MSLParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_MSLParser_CLASS::INTEGER=258;
const int YY_MSLParser_CLASS::T_INTEGER=259;
const int YY_MSLParser_CLASS::FLOAT=260;
const int YY_MSLParser_CLASS::T_FLOAT=261;
const int YY_MSLParser_CLASS::STRING=262;
const int YY_MSLParser_CLASS::T_STRING=263;
const int YY_MSLParser_CLASS::BOOL=264;
const int YY_MSLParser_CLASS::T_BOOL=265;
const int YY_MSLParser_CLASS::T_POSE=266;
const int YY_MSLParser_CLASS::IDENTIFIER=267;
const int YY_MSLParser_CLASS::ARROW=268;
const int YY_MSLParser_CLASS::DOT=269;
const int YY_MSLParser_CLASS::PARAM_NAME=270;
const int YY_MSLParser_CLASS::PARAM_PATH=271;
const int YY_MSLParser_CLASS::PARAM_SIZE=272;
const int YY_MSLParser_CLASS::PARAM_MARKS=273;
const int YY_MSLParser_CLASS::PARAM_POS=274;
const int YY_MSLParser_CLASS::PARAM_COLOR=275;
const int YY_MSLParser_CLASS::PARAM_WIDTH=276;
const int YY_MSLParser_CLASS::PARAM_HEIGHT=277;
const int YY_MSLParser_CLASS::PARAM_TEXT=278;
const int YY_MSLParser_CLASS::PARAM_PATH_ORJ=279;
const int YY_MSLParser_CLASS::PARAM_PATH_TEX=280;
const int YY_MSLParser_CLASS::PARAM_ANIM_TYPE=281;
const int YY_MSLParser_CLASS::PARAM_REFERENCE=282;
const int YY_MSLParser_CLASS::PARAM_MAO=283;
const int YY_MSLParser_CLASS::PARAM_TIME=284;
const int YY_MSLParser_CLASS::PARAM_OFFSET=285;
const int YY_MSLParser_CLASS::PARAM_IMPULSE=286;
const int YY_MSLParser_CLASS::PARAM_ANG_AXIS=287;
const int YY_MSLParser_CLASS::PARAM_PROPERTY=288;
const int YY_MSLParser_CLASS::PARAM_ROT_TYPE=289;
const int YY_MSLParser_CLASS::PARAM_LOC_TYPE=290;
const int YY_MSLParser_CLASS::PARAM_ROTATION=291;
const int YY_MSLParser_CLASS::PARAM_LOCATION=292;
const int YY_MSLParser_CLASS::PARAM_TYPE=293;
const int YY_MSLParser_CLASS::PARAM_VALUE=294;
const int YY_MSLParser_CLASS::PARAM_VALUE1=295;
const int YY_MSLParser_CLASS::PARAM_VALUE2=296;
const int YY_MSLParser_CLASS::PARAM_ACTUATOR=297;
const int YY_MSLParser_CLASS::PARAM_KEY=298;
const int YY_MSLParser_CLASS::PARAM_DISTANCE=299;
const int YY_MSLParser_CLASS::PARAM_PROBABILITY=300;
const int YY_MSLParser_CLASS::PARAM_INVERSE=301;
const int YY_MSLParser_CLASS::PARAM_GRAVITY=302;
const int YY_MSLParser_CLASS::PARAM_AXIS=303;
const int YY_MSLParser_CLASS::PARAM_MASS=304;
const int YY_MSLParser_CLASS::PARAM_SHAPE=305;
const int YY_MSLParser_CLASS::PARAM_SHADOWS=306;
const int YY_MSLParser_CLASS::PARAM_SUN=307;
const int YY_MSLParser_CLASS::MAOWORLD=308;
const int YY_MSLParser_CLASS::MAOMARK=309;
const int YY_MSLParser_CLASS::MAOMARKSGROUP=310;
const int YY_MSLParser_CLASS::MAORENDERABLE2DIMAGE=311;
const int YY_MSLParser_CLASS::MAORENDERABLE2DTEXT=312;
const int YY_MSLParser_CLASS::MAORENDERABLE3DLINE=313;
const int YY_MSLParser_CLASS::MAORENDERABLE3DORJ=314;
const int YY_MSLParser_CLASS::MAORENDERABLE3DPATH=315;
const int YY_MSLParser_CLASS::MAORENDERABLE3DTEAPOT=316;
const int YY_MSLParser_CLASS::MLBACTUATORADDDYNAMICOBJECT=317;
const int YY_MSLParser_CLASS::MLBACTUATORANG=318;
const int YY_MSLParser_CLASS::MLBACTUATORCHANGEPOSE=319;
const int YY_MSLParser_CLASS::MLBACTUATORDISTANCE=320;
const int YY_MSLParser_CLASS::MLBACTUATORPATHADDPOINT=321;
const int YY_MSLParser_CLASS::MLBACTUATORPATHREMOVEPOINTS=322;
const int YY_MSLParser_CLASS::MLBACTUATORPROPERTY=323;
const int YY_MSLParser_CLASS::MLBACTUATORQUITAPP=324;
const int YY_MSLParser_CLASS::MLBACTUATORRANDOM=325;
const int YY_MSLParser_CLASS::MLBACTUATORRELATIVEPOSE=326;
const int YY_MSLParser_CLASS::MLBACTUATORSOUND=327;
const int YY_MSLParser_CLASS::MLBACTUATORVISIBILITY=328;
const int YY_MSLParser_CLASS::MLBACTUATORANIMOREJ=329;
const int YY_MSLParser_CLASS::MLBCONTROLLERAND=330;
const int YY_MSLParser_CLASS::MLBCONTROLLERNAND=331;
const int YY_MSLParser_CLASS::MLBCONTROLLERNOR=332;
const int YY_MSLParser_CLASS::MLBCONTROLLEROR=333;
const int YY_MSLParser_CLASS::MLBCONTROLLERSCRIPT=334;
const int YY_MSLParser_CLASS::MLBSENSORACTUATOR=335;
const int YY_MSLParser_CLASS::MLBSENSORALWAYS=336;
const int YY_MSLParser_CLASS::MLBSENSORCOLLISION=337;
const int YY_MSLParser_CLASS::MLBSENSORDELAY=338;
const int YY_MSLParser_CLASS::MLBSENSORKEYBOARD=339;
const int YY_MSLParser_CLASS::MLBSENSORNEAR=340;
const int YY_MSLParser_CLASS::MLBSENSORPROPERTY=341;
const int YY_MSLParser_CLASS::MLBSENSORRANDOM=342;
const int YY_MSLParser_CLASS::GROUND=343;
const int YY_MSLParser_CLASS::DYNAMICOBJECT=344;
const int YY_MSLParser_CLASS::STATICOBJECT=345;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_MSLParser_CLASS::token */
#endif
/*apres const  */
YY_MSLParser_CLASS::YY_MSLParser_CLASS(YY_MSLParser_CONSTRUCTOR_PARAM) YY_MSLParser_CONSTRUCTOR_INIT
{
#if YY_MSLParser_DEBUG != 0
YY_MSLParser_DEBUG_FLAG=0;
#endif
YY_MSLParser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		573
#define	YYFLAG		-32768
#define	YYNTBASE	97

#define YYTRANSLATE(x) ((unsigned)(x) <= 345 ? yytranslate[x] : 206)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    95,
    96,     2,     2,    94,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    93,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    91,     2,    92,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90
};

#if YY_MSLParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     6,     9,    10,    12,    14,    16,    18,    20,    22,
    24,    26,    29,    30,    35,    38,    43,    46,    51,    54,
    59,    62,    67,    70,    71,    82,    90,    94,    95,    96,
   109,   113,   115,   116,   126,   139,   140,   150,   166,   167,
   178,   191,   192,   203,   216,   217,   228,   238,   239,   250,
   257,   268,   269,   276,   277,   282,   289,   290,   298,   303,
   308,   309,   312,   313,   316,   319,   322,   323,   325,   327,
   329,   331,   333,   335,   337,   339,   341,   343,   345,   347,
   349,   351,   353,   355,   357,   359,   361,   363,   365,   367,
   369,   371,   373,   375,   381,   386,   391,   396,   401,   402,
   408,   415,   421,   424,   431,   438,   444,   451,   457,   458,
   464,   465,   471,   477,   487,   497,   503,   504,   510,   514,
   520,   530,   536,   540,   546,   550,   556,   563,   567,   570,
   574,   576,   577,   580,   584,   586,   587,   590,   594,   596,
   597,   600,   604,   606,   607,   615,   621,   625,   631,   632,
   638,   642,   648,   652,   658,   665,   671,   678,   684,   690,
   700,   713,   723,   729,   733,   736,   737,   743,   747,   751,
   753,   755,   757,   759,   761,   778,   780,   782,   784,   786,
   788,   792,   794,   800,   806,   814,   822
};

static const short yyrhs[] = {    53,
   205,    91,    98,    92,     0,    98,    99,     0,     0,   102,
     0,   106,     0,   109,     0,   112,     0,   115,     0,   118,
     0,   121,     0,   124,     0,   100,   101,     0,     0,     4,
   205,    93,   195,     0,     4,   205,     0,     6,   205,    93,
   197,     0,     6,   205,     0,    10,   205,    93,   196,     0,
    10,   205,     0,     8,   205,    93,   198,     0,     8,   205,
     0,    11,   205,    93,   199,     0,    11,   205,     0,     0,
    54,   205,    91,   104,   103,   100,   132,   192,   127,    92,
     0,    16,    93,   198,    17,    93,   197,   105,     0,    30,
    93,   199,     0,     0,     0,    55,   205,    91,   107,    18,
    93,   108,   100,   132,   192,   127,    92,     0,   205,    94,
   108,     0,   205,     0,     0,    56,   205,    91,   111,   110,
   100,   132,   192,    92,     0,    16,    93,   198,    19,    93,
   202,    21,    93,   195,    22,    93,   195,     0,     0,    57,
   205,    91,   114,   113,   100,   132,   192,    92,     0,    16,
    93,   198,    17,    93,   195,    23,    93,   198,    19,    93,
   202,    20,    93,   203,     0,     0,    59,   205,    91,   117,
   116,   100,   132,   192,   129,    92,     0,    17,    93,   197,
    24,    93,   198,    25,    93,   198,    27,    93,   205,     0,
     0,    58,   205,    91,   120,   119,   100,   132,   192,   129,
    92,     0,    17,    93,   197,    20,    93,   203,    27,    93,
   205,    27,    93,   205,     0,     0,    60,   205,    91,   123,
   122,   100,   132,   192,   129,    92,     0,    17,    93,   197,
    20,    93,   203,    27,    93,   205,     0,     0,    61,   205,
    91,   126,   125,   100,   132,   192,   129,    92,     0,    17,
    93,   197,    27,    93,   205,     0,    88,    91,    48,    93,
   198,    47,    93,   197,   128,    92,     0,     0,    51,    93,
   196,    52,    93,   204,     0,     0,    89,    91,   130,    92,
     0,    90,    91,    50,    93,   198,    92,     0,     0,    49,
    93,   197,    50,    93,   198,   131,     0,   131,    30,    93,
   199,     0,   131,    31,    93,   204,     0,     0,   132,   133,
     0,     0,   134,   135,     0,   134,   136,     0,   134,   137,
     0,     0,   138,     0,   141,     0,   143,     0,   145,     0,
   147,     0,   149,     0,   151,     0,   154,     0,   156,     0,
   158,     0,   160,     0,   162,     0,   164,     0,   166,     0,
   168,     0,   170,     0,   172,     0,   174,     0,   175,     0,
   177,     0,   179,     0,   181,     0,   183,     0,   185,     0,
   187,     0,   190,     0,    62,   205,    91,   139,    92,     0,
    28,    93,   205,   140,     0,   140,    29,    93,   195,     0,
   140,    30,    93,   199,     0,   140,    31,    93,   204,     0,
     0,    63,   205,    91,   142,    92,     0,    33,    93,   201,
    32,    93,   198,     0,    64,   205,    91,   144,    92,     0,
   144,   144,     0,    35,    93,   198,    37,    93,   204,     0,
    34,    93,   198,    36,    93,   204,     0,    65,   205,    91,
   146,    92,     0,    28,    93,   205,    33,    93,   201,     0,
    66,   205,    91,   148,    92,     0,     0,    67,   205,    91,
   150,    92,     0,     0,    68,   205,    91,   152,    92,     0,
    68,   205,    91,   153,    92,     0,    38,    93,   198,    33,
    93,   201,    39,    93,   200,     0,    38,    93,   198,    33,
    93,   201,    39,    93,   201,     0,    69,   205,    91,   155,
    92,     0,     0,    70,   205,    91,   157,    92,     0,    33,
    93,   201,     0,    71,   205,    91,   159,    92,     0,    27,
    93,   205,    33,    93,   201,    46,    93,   196,     0,    72,
   205,    91,   161,    92,     0,    16,    93,   198,     0,    73,
   205,    91,   163,    92,     0,    39,    93,   196,     0,    74,
   205,    91,   165,    92,     0,    38,    93,   198,    26,    93,
   198,     0,    38,    93,   198,     0,    75,   167,     0,   167,
    94,   205,     0,   205,     0,     0,    76,   169,     0,   169,
    94,   205,     0,   205,     0,     0,    78,   171,     0,   171,
    94,   205,     0,   205,     0,     0,    77,   173,     0,   173,
    94,   205,     0,   205,     0,     0,    79,   205,    91,    16,
    93,   198,    92,     0,    80,   205,    91,   176,    92,     0,
    42,    93,   205,     0,    81,   205,    91,   178,    92,     0,
     0,    82,   205,    91,   180,    92,     0,    33,    93,   205,
     0,    83,   205,    91,   182,    92,     0,    29,    93,   195,
     0,    84,   205,    91,   184,    92,     0,    38,    93,   198,
    43,    93,   198,     0,    85,   205,    91,   186,    92,     0,
    33,    93,   205,    44,    93,   197,     0,    86,   205,    91,
   188,    92,     0,    86,   205,    91,   189,    92,     0,    38,
    93,   198,    33,    93,   201,    39,    93,   200,     0,    38,
    93,   198,    33,    93,   201,    40,    93,   200,    41,    93,
   200,     0,    38,    93,   198,    33,    93,   201,    39,    93,
   201,     0,    87,   205,    91,   191,    92,     0,    45,    93,
   197,     0,   192,   193,     0,     0,   194,    13,   205,    13,
   194,     0,   194,    13,   194,     0,   205,    94,   194,     0,
   205,     0,     3,     0,     9,     0,     5,     0,     7,     0,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,     0,   195,     0,   196,
     0,   197,     0,   198,     0,   199,     0,   205,    14,   205,
     0,   205,     0,    95,   195,    94,   195,    96,     0,    95,
   197,    94,   197,    96,     0,    95,   195,    94,   195,    94,
   195,    96,     0,    95,   197,    94,   197,    94,   197,    96,
     0,    12,     0
};

#endif

#if (YY_MSLParser_DEBUG != 0) || defined(YY_MSLParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   276,   279,   280,   283,   284,   285,   286,   287,   288,   289,
   290,   293,   294,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   311,   311,   313,   315,   316,   320,   320,
   323,   324,   328,   328,   330,   333,   333,   335,   338,   338,
   340,   343,   343,   345,   348,   348,   350,   353,   353,   355,
   359,   360,   362,   363,   367,   368,   369,   372,   374,   375,
   376,   382,   383,   386,   387,   388,   391,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   409,   410,   411,   412,   413,   416,   417,   418,   419,   420,
   421,   422,   423,   433,   435,   437,   438,   439,   440,   443,
   445,   448,   450,   451,   452,   455,   457,   460,   463,   466,
   468,   471,   472,   474,   476,   479,   481,   484,   486,   489,
   491,   494,   496,   499,   501,   504,   506,   507,   511,   513,
   514,   515,   518,   520,   521,   522,   525,   527,   528,   529,
   532,   534,   535,   536,   539,   545,   547,   550,   552,   555,
   557,   560,   562,   565,   567,   570,   572,   575,   576,   578,
   579,   581,   584,   586,   592,   593,   595,   604,   613,   620,
   627,   630,   633,   636,   639,   646,   647,   648,   649,   650,
   653,   654,   657,   659,   662,   665,   668
};

static const char * const yytname[] = {   "$","error","$illegal.","INTEGER",
"T_INTEGER","FLOAT","T_FLOAT","STRING","T_STRING","BOOL","T_BOOL","T_POSE","IDENTIFIER",
"ARROW","DOT","PARAM_NAME","PARAM_PATH","PARAM_SIZE","PARAM_MARKS","PARAM_POS",
"PARAM_COLOR","PARAM_WIDTH","PARAM_HEIGHT","PARAM_TEXT","PARAM_PATH_ORJ","PARAM_PATH_TEX",
"PARAM_ANIM_TYPE","PARAM_REFERENCE","PARAM_MAO","PARAM_TIME","PARAM_OFFSET",
"PARAM_IMPULSE","PARAM_ANG_AXIS","PARAM_PROPERTY","PARAM_ROT_TYPE","PARAM_LOC_TYPE",
"PARAM_ROTATION","PARAM_LOCATION","PARAM_TYPE","PARAM_VALUE","PARAM_VALUE1",
"PARAM_VALUE2","PARAM_ACTUATOR","PARAM_KEY","PARAM_DISTANCE","PARAM_PROBABILITY",
"PARAM_INVERSE","PARAM_GRAVITY","PARAM_AXIS","PARAM_MASS","PARAM_SHAPE","PARAM_SHADOWS",
"PARAM_SUN","MAOWORLD","MAOMARK","MAOMARKSGROUP","MAORENDERABLE2DIMAGE","MAORENDERABLE2DTEXT",
"MAORENDERABLE3DLINE","MAORENDERABLE3DORJ","MAORENDERABLE3DPATH","MAORENDERABLE3DTEAPOT",
"MLBACTUATORADDDYNAMICOBJECT","MLBACTUATORANG","MLBACTUATORCHANGEPOSE","MLBACTUATORDISTANCE",
"MLBACTUATORPATHADDPOINT","MLBACTUATORPATHREMOVEPOINTS","MLBACTUATORPROPERTY",
"MLBACTUATORQUITAPP","MLBACTUATORRANDOM","MLBACTUATORRELATIVEPOSE","MLBACTUATORSOUND",
"MLBACTUATORVISIBILITY","MLBACTUATORANIMOREJ","MLBCONTROLLERAND","MLBCONTROLLERNAND",
"MLBCONTROLLERNOR","MLBCONTROLLEROR","MLBCONTROLLERSCRIPT","MLBSENSORACTUATOR",
"MLBSENSORALWAYS","MLBSENSORCOLLISION","MLBSENSORDELAY","MLBSENSORKEYBOARD",
"MLBSENSORNEAR","MLBSENSORPROPERTY","MLBSENSORRANDOM","GROUND","DYNAMICOBJECT",
"STATICOBJECT","'{'","'}'","'='","','","'('","')'","begin","maos","mao","mao_properties",
"mao_property","def_maomark","@1","param_maomark","optparam_maomark","def_maomarksgroup",
"@2","param_maomarksgroup","def_maorenderable2dimage","@3","param_maorenderable2dimage",
"def_maorenderable2dtext","@4","param_maorenderable2dtext","def_maorenderable3dorj",
"@5","param_maorenderable3dorj","def_maorenderable3dline","@6","param_maorenderable3dline",
"def_maorenderable3dpath","@7","param_maorenderable3dpath","def_maorenderable3dteapot",
"@8","param_maorenderable3dteapot","ground","optparam_ground","physicobj","param_dynamicobj",
"optparam_dynamicobj","mlbs","mlb","def_mlb","mlbactuator","mlbcontroller","mlbsensor",
"def_mlbactuatoradddynamic","param_mlbactuatoradddynamic","optparam_mlbactuatoradddynamic",
"def_mlbactuatorang","param_mlbactuatorang","def_mlbactuatorchangepose","param_mlbactuatorchangepose",
"def_mlbactuatordistance","param_mlbactuatordistance","def_mlbactuatorpathaddpoint",
"param_mlbactuatorpathaddpoint","def_mlbactuatorpathremovepoints","param_mlbactuatorpathremovepoints",
"def_mlbactuatorproperty","param_mlbactuatorproperty","param_mlbactuatorproperty2",
"def_mlbactuatorquitapp","param_mlbactuatorquitapp","def_mlbactuatorrandom",
"param_mlbactuatorrandom","def_mlbactuatorrelativepose","param_mlbactuatorrelativepose",
"def_mlbactuatorsound","param_mlbactuatorsound","def_mlbactuatorvisibility",
"param_mlbactuatorvisibility","def_mlbactuatoranimorej","param_mlbactuatoranimorej",
"def_mlbcontrollerand","list_mlbcontrollerand","def_mlbcontrollernand","list_mlbcontrollernand",
"def_mlbcontrolleror","list_mlbcontrolleror","def_mlbcontrollernor","list_mlbcontrollernor",
"def_mlbcontrollerscript","def_mlbsensoractuator","param_mlbsensoractuator",
"def_mlbsensoralways","param_mlbsensoralways","def_mlbsensorcollision","param_mlbsensorcollision",
"def_mlbsensordelay","param_mlbsensordelay","def_mlbsensorkeyboard","param_mlbsensorkeyboard",
"def_mlbsensornear","param_mlbsensornear","def_mlbsensorproperty","param_mlbsensorproperty",
"param_mlbsensorproperty2","def_mlbsensorrandom","param_mlbsensorrandom","links",
"link","list_mlbidentifiers","integer","bool","float","string","pose","maovalue",
"maoproperty","vector2di","vector3di","vector3df","identifier","identifier"
};
#endif

static const short yyr1[] = {     0,
    97,    98,    98,    99,    99,    99,    99,    99,    99,    99,
    99,   100,   100,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   103,   102,   104,   105,   105,   107,   106,
   108,   108,   110,   109,   111,   113,   112,   114,   116,   115,
   117,   119,   118,   120,   122,   121,   123,   125,   124,   126,
   127,   127,   128,   128,   129,   129,   129,   130,   131,   131,
   131,   132,   132,   133,   133,   133,   134,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   136,   136,   136,   136,   136,   137,   137,   137,   137,   137,
   137,   137,   137,   138,   139,   140,   140,   140,   140,   141,
   142,   143,   144,   144,   144,   145,   146,   147,   148,   149,
   150,   151,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   165,   166,   167,
   167,   167,   168,   169,   169,   169,   170,   171,   171,   171,
   172,   173,   173,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   187,   188,
   188,   189,   190,   191,   192,   192,   193,   193,   194,   194,
   195,   196,   197,   198,   199,   200,   200,   200,   200,   200,
   201,   201,   202,    -1,   203,   204,   205
};

static const short yyr2[] = {     0,
     5,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     0,     4,     2,     4,     2,     4,     2,     4,
     2,     4,     2,     0,    10,     7,     3,     0,     0,    12,
     3,     1,     0,     9,    12,     0,     9,    15,     0,    10,
    12,     0,    10,    12,     0,    10,     9,     0,    10,     6,
    10,     0,     6,     0,     4,     6,     0,     7,     4,     4,
     0,     2,     0,     2,     2,     2,     0,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     5,     4,     4,     4,     4,     0,     5,
     6,     5,     2,     6,     6,     5,     6,     5,     0,     5,
     0,     5,     5,     9,     9,     5,     0,     5,     3,     5,
     9,     5,     3,     5,     3,     5,     6,     3,     2,     3,
     1,     0,     2,     3,     1,     0,     2,     3,     1,     0,
     2,     3,     1,     0,     7,     5,     3,     5,     0,     5,
     3,     5,     3,     5,     6,     5,     6,     5,     5,     9,
    12,     9,     5,     3,     2,     0,     5,     3,     3,     1,
     1,     1,     1,     1,    16,     1,     1,     1,     1,     1,
     3,     1,     5,     5,     7,     7,     1
};

static const short yydefact[] = {     0,
     0,   187,     0,     3,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     1,     2,     4,     5,     6,     7,     8,
     9,    10,    11,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
    24,     0,     0,    33,     0,    36,     0,    42,     0,    39,
     0,    45,     0,    48,     0,    13,     0,     0,    13,     0,
    13,     0,    13,     0,    13,     0,    13,     0,    13,   174,
     0,    63,     0,     0,    63,     0,    63,   173,     0,    63,
     0,    63,     0,    63,     0,    63,     0,     0,     0,     0,
     0,     0,    12,    67,    13,    32,     0,    67,     0,    67,
     0,    67,     0,    67,     0,    67,     0,    67,     0,    15,
    17,    21,    19,    23,    62,     0,    52,    63,     0,     0,
     0,     0,     0,     0,    57,     0,    57,     0,    57,     0,
    57,    28,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   132,   136,   144,   140,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    64,    65,    66,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,     0,     0,   165,     0,   170,    67,    31,     0,
     0,    34,   171,     0,    37,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    50,     0,     0,    26,    14,    16,
    20,   172,    18,     0,    22,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   129,   131,
   133,   135,   141,   143,   137,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    25,     0,     0,    52,
     0,     0,     0,     0,     0,     0,     0,    43,     0,    40,
     0,    46,    49,     0,     0,     0,     0,     0,     0,   109,
   111,     0,   117,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   149,     0,     0,     0,     0,     0,
     0,     0,   168,   170,   169,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   130,   134,   142,   138,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
     0,     0,     0,    55,     0,     0,    47,     0,     0,    94,
     0,   100,     0,     0,   102,   103,     0,   106,   108,   110,
     0,   112,   113,   116,     0,   118,     0,   120,     0,   122,
     0,   124,     0,   126,     0,     0,   146,   148,     0,   150,
     0,   152,     0,   154,     0,   156,     0,   158,   159,     0,
   163,     0,   167,   183,     0,     0,     0,     0,     0,     0,
     0,     0,    99,     0,   182,     0,     0,     0,     0,   119,
     0,   123,   125,   128,     0,   147,   151,   153,     0,     0,
     0,   164,     0,     0,     0,     0,     0,     0,    56,     0,
     0,    95,     0,     0,     0,     0,     0,     0,     0,     0,
   145,     0,     0,     0,     0,    35,     0,   185,    44,     0,
    41,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    54,     0,    61,     0,
     0,     0,     0,   101,     0,   105,   104,   107,     0,     0,
   127,   155,   157,     0,     0,     0,     0,    58,     0,    96,
    97,    98,     0,     0,     0,     0,     0,     0,    51,    38,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   176,   177,   178,   179,   180,   114,   115,
   121,   160,   162,     0,     0,    59,    60,     0,     0,     0,
     0,     0,     0,     0,    53,     0,   186,   161,     0,   175,
     0,     0,     0
};

static const short yydefgoto[] = {   571,
     5,    15,    72,    93,    16,    56,    41,   218,    17,    42,
    95,    18,    59,    44,    19,    61,    46,    20,    65,    50,
    21,    63,    48,    22,    67,    52,    23,    69,    54,   194,
   516,   210,   313,   518,    94,   115,   116,   164,   165,   166,
   167,   320,   462,   168,   322,   169,   386,   170,   327,   171,
   328,   172,   329,   173,   331,   332,   174,   333,   175,   335,
   176,   337,   177,   339,   178,   341,   179,   343,   180,   239,
   181,   241,   182,   245,   183,   243,   184,   185,   350,   186,
   351,   187,   353,   188,   355,   189,   357,   190,   359,   191,
   361,   362,   192,   364,   117,   195,   196,   544,   545,   224,
   547,   548,   549,   434,   201,   207,   506,   197
};

static const short yypact[] = {   -30,
    17,-32768,   -47,-32768,   113,    17,    17,    17,    17,    17,
    17,    17,    17,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -45,   -37,   -26,   -23,   -21,   -17,   -14,
    -6,    84,-32768,    94,    96,    91,   109,   110,   114,    37,
-32768,   115,    39,-32768,    41,-32768,    42,-32768,    43,-32768,
    72,-32768,    83,-32768,   171,-32768,    87,   171,-32768,   171,
-32768,   177,-32768,   177,-32768,   177,-32768,   177,-32768,-32768,
   167,    65,    17,   168,    65,   169,    65,-32768,   170,    65,
   164,    65,   172,    65,   162,    65,    98,    17,    17,    17,
    17,    17,-32768,     9,-32768,   100,   102,     1,   103,     1,
   105,    -8,   108,    -8,   111,    -8,   117,    -8,   177,   145,
   146,   147,   148,   149,-32768,   150,    27,    65,    17,   112,
     7,   194,    10,   151,    15,   171,    15,   151,    15,    17,
    15,   173,   194,   177,   171,   197,   177,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
    17,    17,    17,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   118,   153,-32768,   195,   154,     9,-32768,   194,
   222,-32768,-32768,   224,-32768,   194,   223,   158,   160,   161,
   227,   163,   229,   166,-32768,   174,   178,-32768,-32768,-32768,
-32768,-32768,-32768,   177,-32768,   176,   179,   181,   182,   183,
   185,   186,   187,   188,   189,   190,   191,   192,   165,-32768,
   198,-32768,   199,-32768,   200,-32768,   193,   204,   205,   206,
   207,   208,   209,   210,   211,   212,-32768,    17,    17,    27,
   213,   215,   216,   217,   219,   214,   235,-32768,   220,-32768,
   221,-32768,-32768,   177,   177,   226,   228,    45,   234,-32768,
-32768,   248,-32768,   231,   238,   288,   266,   268,    17,    17,
    17,    17,   300,   275,-32768,   285,   291,   283,   289,   286,
   278,   233,-32768,   -11,-32768,   236,   194,   194,   171,   194,
    17,   237,   239,   240,   171,    17,-32768,   177,   241,   244,
   245,   247,   252,   255,    14,   256,   249,   258,   260,   261,
   263,   264,   265,   267,   269,   271,   270,   273,   276,   274,
   277,   279,   282,-32768,-32768,-32768,-32768,   290,   292,   284,
   287,   294,   296,   299,   305,   306,   308,   309,   312,   313,
   315,   317,   318,   320,   171,    17,-32768,   257,   307,   321,
   243,   331,   177,-32768,   171,   343,-32768,   177,    17,-32768,
    17,-32768,   171,   171,-32768,    45,    17,-32768,-32768,-32768,
   171,-32768,-32768,-32768,    17,-32768,    17,-32768,   171,-32768,
   197,-32768,   171,-32768,   171,    17,-32768,-32768,    17,-32768,
   194,-32768,   171,-32768,    17,-32768,   171,-32768,-32768,   177,
-32768,   280,-32768,-32768,   322,   323,   194,   324,   325,   326,
   327,   177,-32768,   339,   367,   346,   295,   351,   365,-32768,
   377,-32768,-32768,   387,   329,-32768,-32768,-32768,   376,   378,
   390,-32768,   332,   194,   112,   328,    17,   333,-32768,    17,
   177,    21,   334,    17,   335,   338,   340,   341,   342,   344,
-32768,   345,   348,   349,   177,-32768,   412,-32768,-32768,   171,
-32768,   177,   350,   352,   354,   171,-32768,   353,   353,    17,
    17,    17,   171,   171,   177,    17,   385,   356,-32768,   177,
   194,   177,   353,-32768,   177,-32768,-32768,-32768,   400,   404,
-32768,-32768,-32768,    77,   359,   363,   151,    92,   177,-32768,
-32768,-32768,   364,   368,   369,   372,   373,   197,-32768,-32768,
   374,   375,   177,   177,    54,   197,    54,   104,   405,   177,
   353,   177,   366,-32768,-32768,   177,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   429,   379,-32768,-32768,   177,   177,   380,
   353,   177,   381,   104,-32768,   177,-32768,-32768,   177,-32768,
   471,   475,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   116,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   357,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   218,
-32768,   -84,-32768,-32768,   -22,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   201,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -70,-32768,  -242,  -108,  -133,   -31,
   -40,  -111,  -497,  -371,    25,  -127,  -447,    -1
};


#define	YYLAST		538


static const short yytable[] = {     3,
   213,   366,   223,  -166,    24,    25,    26,    27,    28,    29,
    30,    31,  -166,   204,    71,   303,   305,    74,     2,    76,
  -166,     2,     1,   440,   219,   225,     2,   121,     2,   123,
    79,   125,    81,   127,    83,   129,    85,   131,     2,   552,
   554,   507,   212,     4,   214,    32,   216,   323,   324,   483,
   484,   485,    98,    33,   100,   522,   203,   102,    78,   104,
    70,   106,   222,   108,    34,     2,   568,    35,    88,    36,
    89,    96,    90,    37,    91,    92,    38,   132,   323,   324,
  -166,  -166,   259,  -166,    39,   211,   110,   111,   112,   113,
   114,   261,  -166,   557,   221,   198,  -166,   264,   202,    40,
  -166,   205,   220,   208,   209,   385,   203,    47,    78,    43,
    70,    45,   222,   565,   193,   526,   527,    96,   508,   509,
   510,   531,   532,   423,   514,    49,    51,   260,   215,    55,
    53,    58,    57,    60,    62,    64,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   240,
   242,   244,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   317,   550,    66,   553,     6,     7,     8,     9,
    10,    11,    12,    13,    75,    68,    77,    70,    80,    73,
    82,    78,    84,    87,    86,    99,    97,   103,   107,   101,
   109,   105,   275,   119,   120,   122,   203,   124,   368,   369,
   126,   371,   217,   128,    14,   222,   200,   258,   256,   130,
   118,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   133,   134,   135,
   136,   137,   262,   318,   257,   206,   263,   259,   266,   265,
   267,   269,   268,   319,   270,   271,   304,   272,   289,   302,
   321,   326,   312,   334,   336,   273,   276,   443,   370,   277,
   274,   278,   279,   280,   376,   281,   282,   283,   284,   285,
   286,   287,   288,   293,   314,   330,   378,   344,   345,   346,
   347,   290,   291,   292,   294,   295,   296,   297,   298,   299,
   300,   301,   448,   338,   340,   342,   307,   308,   309,   372,
   310,   311,   315,   316,   377,   348,   349,   352,   456,   354,
   356,   358,   363,   360,   422,   365,   453,   367,   425,   373,
   374,   466,   375,   379,   430,   380,   427,   381,   382,   426,
   388,   429,   436,   437,   383,   476,   432,   384,   387,   389,
   439,   390,   424,   391,   392,   393,   394,   428,   442,   395,
   396,   398,   444,   397,   445,   399,   401,   400,   402,   431,
   463,   403,   449,   404,   458,   407,   451,   433,   408,   435,
   464,   465,   405,   467,   406,   438,   409,   410,   452,   530,
   521,   411,   520,   435,   539,   441,   412,   468,   413,   414,
   461,   415,   551,   416,   446,   417,   418,   447,   419,   469,
   420,   421,   470,   450,   454,   455,   457,   459,   472,   460,
   471,   473,   474,   478,   475,   480,   486,   488,   556,   482,
   489,   498,   490,   491,   492,   515,   493,   494,   524,   499,
   495,   496,   501,   497,   502,   504,   503,   505,   517,   525,
   500,   528,   511,   512,   529,   479,   555,   534,   481,   559,
   535,   536,   487,   513,   537,   538,   540,   541,   519,   560,
   572,   561,   564,   523,   573,   199,   567,   306,   325,   477,
     0,     0,     0,     0,     0,     0,     0,   533,   435,   435,
   435,     0,     0,     0,   435,     0,     0,     0,     0,     0,
     0,   542,   543,   546,     0,   546,   546,     0,     0,     0,
   558,     0,     0,     0,   275,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   562,   563,     0,     0,
   566,     0,   546,   435,   569,   435,     0,   570
};

static const short yycheck[] = {     1,
   128,    13,   136,    12,     6,     7,     8,     9,    10,    11,
    12,    13,    12,   122,    55,   258,   259,    58,    12,    60,
    12,    12,    53,   395,   133,   137,    12,    98,    12,   100,
    62,   102,    64,   104,    66,   106,    68,   108,    12,   537,
   538,   489,   127,    91,   129,    91,   131,    34,    35,    29,
    30,    31,    75,    91,    77,   503,     3,    80,     5,    82,
     7,    84,     9,    86,    91,    12,   564,    91,     4,    91,
     6,    73,     8,    91,    10,    11,    91,   109,    34,    35,
    89,    90,    94,    92,    91,   126,    88,    89,    90,    91,
    92,   200,    92,   541,   135,   118,    88,   206,    92,    16,
    92,    92,   134,    89,    90,    92,     3,    17,     5,    16,
     7,    16,     9,   561,    88,    39,    40,   119,   490,   491,
   492,    30,    31,   366,   496,    17,    17,   198,   130,    93,
    17,    93,    18,    93,    93,    93,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   274,   535,    93,   537,    54,    55,    56,    57,
    58,    59,    60,    61,    59,    93,    61,     7,    63,    93,
    65,     5,    67,    17,    69,    17,    19,    24,    27,    20,
    93,    20,   224,    94,    93,    93,     3,    93,   307,   308,
    93,   310,    30,    93,    92,     9,    95,    13,    91,    93,
    95,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    93,    93,    93,
    93,    93,    21,   275,    92,    95,    23,    94,    91,    27,
    91,    25,    92,    28,    92,    27,   258,    92,    94,    48,
    33,    28,    49,    33,    27,    92,    91,   401,   309,    91,
    93,    91,    91,    91,   315,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    50,    38,   318,   289,   290,   291,
   292,    94,    94,    94,    91,    91,    91,    91,    91,    91,
    91,    91,   411,    16,    39,    38,    94,    93,    93,   311,
    94,    93,    93,    93,   316,    16,    42,    33,   427,    29,
    38,    33,    45,    38,   365,    93,    47,    92,    22,    93,
    92,    37,    93,    93,   375,    92,    94,    93,    92,    19,
    92,   373,   383,   384,    93,   454,   378,    93,    93,    92,
   391,    92,    96,    93,    92,    92,    92,    27,   399,    93,
    92,    92,   403,    93,   405,    93,    93,    92,    92,    27,
    32,    93,   413,    92,    50,    92,   417,   379,    92,   381,
    14,    36,    93,    33,    93,   387,    93,    92,   420,   517,
   502,    93,   501,   395,   528,   397,    92,    33,    93,    92,
   432,    93,   536,    92,   406,    93,    92,   409,    92,    33,
    93,    92,    26,   415,    93,    93,    93,    92,    43,    93,
    92,    44,    33,    96,    93,    93,    93,    93,   540,   461,
    93,    20,    93,    93,    93,    51,    93,    93,    39,   480,
    93,    93,    93,   475,    93,   486,    93,    95,    93,    46,
   482,    93,   493,   494,    92,   457,    52,    94,   460,    94,
    93,    93,   464,   495,    93,    93,    93,    93,   500,    41,
     0,    93,    93,   505,     0,   119,    96,   260,   278,   455,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,   490,   491,
   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
    -1,   533,   534,   535,    -1,   537,   538,    -1,    -1,    -1,
   542,    -1,    -1,    -1,   546,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   558,   559,    -1,    -1,
   562,    -1,   564,   535,   566,   537,    -1,   569
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_MSLParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_MSLParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_MSLParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_MSLParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_MSLParser_CHAR = (token), YY_MSLParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_MSLParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_MSLParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_MSLParser_PURE
/* UNPURE */
#define YYLEX           YY_MSLParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_MSLParser_CHAR;                      /*  the lookahead symbol        */
YY_MSLParser_STYPE      YY_MSLParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_MSLParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_MSLParser_LSP_NEEDED
YY_MSLParser_LTYPE YY_MSLParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_MSLParser_LSP_NEEDED
#define YYLEX           YY_MSLParser_LEX(&YY_MSLParser_LVAL, &YY_MSLParser_LLOC)
#else
#define YYLEX           YY_MSLParser_LEX(&YY_MSLParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_MSLParser_DEBUG != 0
int YY_MSLParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_MSLParser_CLASS::
#endif
     YY_MSLParser_PARSE(YY_MSLParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_MSLParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_MSLParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_MSLParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_MSLParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_MSLParser_LSP_NEEDED
  YY_MSLParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_MSLParser_LTYPE *yyls = yylsa;
  YY_MSLParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_MSLParser_PURE
  int YY_MSLParser_CHAR;
  YY_MSLParser_STYPE YY_MSLParser_LVAL;
  int YY_MSLParser_NERRS;
#ifdef YY_MSLParser_LSP_NEEDED
  YY_MSLParser_LTYPE YY_MSLParser_LLOC;
#endif
#endif

  YY_MSLParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_MSLParser_NERRS = 0;
  YY_MSLParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_MSLParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_MSLParser_LSP_NEEDED
      YY_MSLParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_MSLParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_MSLParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_MSLParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_MSLParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_MSLParser_LSP_NEEDED
      yyls = (YY_MSLParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_MSLParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_MSLParser_CHAR == YYEMPTY)
    {
#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_MSLParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_MSLParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_MSLParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_MSLParser_CHAR);

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_MSLParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_MSLParser_CHAR, YY_MSLParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_MSLParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_MSLParser_CHAR != YYEOF)
    YY_MSLParser_CHAR = YYEMPTY;

  *++yyvsp = YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
  *++yylsp = YY_MSLParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 276 "Kernel/MSLParser.y"
{Logger::getInstance()->out("Parsing completed succesfully! Enjoy your app "+*yyvsp[-3]. string_type );;
    break;}
case 2:
#line 279 "Kernel/MSLParser.y"
{;
    break;}
case 3:
#line 280 "Kernel/MSLParser.y"
{;
    break;}
case 4:
#line 283 "Kernel/MSLParser.y"
{;
    break;}
case 5:
#line 284 "Kernel/MSLParser.y"
{;
    break;}
case 6:
#line 285 "Kernel/MSLParser.y"
{;
    break;}
case 7:
#line 286 "Kernel/MSLParser.y"
{;
    break;}
case 8:
#line 287 "Kernel/MSLParser.y"
{;
    break;}
case 9:
#line 288 "Kernel/MSLParser.y"
{;
    break;}
case 10:
#line 289 "Kernel/MSLParser.y"
{;
    break;}
case 11:
#line 290 "Kernel/MSLParser.y"
{;
    break;}
case 12:
#line 293 "Kernel/MSLParser.y"
{;
    break;}
case 13:
#line 294 "Kernel/MSLParser.y"
{;
    break;}
case 14:
#line 297 "Kernel/MSLParser.y"
{currentMAO->addPropertyInt(*yyvsp[-2]. string_type ,yyvsp[0]. int_type );;
    break;}
case 15:
#line 298 "Kernel/MSLParser.y"
{currentMAO->addPropertyInt(*yyvsp[0]. string_type );;
    break;}
case 16:
#line 299 "Kernel/MSLParser.y"
{currentMAO->addPropertyFloat(*yyvsp[-2]. string_type ,yyvsp[0]. float_type );;
    break;}
case 17:
#line 300 "Kernel/MSLParser.y"
{currentMAO->addPropertyFloat(*yyvsp[0]. string_type );;
    break;}
case 18:
#line 301 "Kernel/MSLParser.y"
{currentMAO->addPropertyBoolean(*yyvsp[-2]. string_type ,yyvsp[0]. bool_type );;
    break;}
case 19:
#line 302 "Kernel/MSLParser.y"
{currentMAO->addPropertyBoolean(*yyvsp[0]. string_type );;
    break;}
case 20:
#line 303 "Kernel/MSLParser.y"
{currentMAO->addPropertyString(*yyvsp[-2]. string_type ,*yyvsp[0]. string_type );;
    break;}
case 21:
#line 304 "Kernel/MSLParser.y"
{currentMAO->addPropertyString(*yyvsp[0]. string_type );;
    break;}
case 22:
#line 305 "Kernel/MSLParser.y"
{currentMAO->addPropertyPose(*yyvsp[-2]. string_type ,*yyvsp[0]. pose_type );;
    break;}
case 23:
#line 306 "Kernel/MSLParser.y"
{currentMAO->addPropertyPose(*yyvsp[0]. string_type );;
    break;}
case 24:
#line 311 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAOMark(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->float1); ((MAOMark*)currentMAO)->setOffsetMatrix(yyvsp[0]. param_type ->pose1);delete yyvsp[0]. param_type ;;
    break;}
case 25:
#line 311 "Kernel/MSLParser.y"
{;
    break;}
case 26:
#line 313 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-4]. string_type ; yyval. param_type ->float1 = yyvsp[-1]. float_type ; delete yyvsp[0]. param_type ;;
    break;}
case 27:
#line 315 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->pose1 = yyvsp[0]. pose_type ;;
    break;}
case 28:
#line 316 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 29:
#line 320 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAOMarksGroup(*yyvsp[-1]. string_type );;
    break;}
case 30:
#line 320 "Kernel/MSLParser.y"
{;
    break;}
case 31:
#line 323 "Kernel/MSLParser.y"
{MAOMark& mark = (MAOMark&)MAOFactory::getInstance()->getMAOPositionator3D(*yyvsp[-2]. string_type );((MAOMarksGroup*)currentMAO)->addMarktoGroup(mark);;
    break;}
case 32:
#line 324 "Kernel/MSLParser.y"
{MAOMark& mark = (MAOMark&)MAOFactory::getInstance()->getMAOPositionator3D(*yyvsp[0]. string_type );((MAOMarksGroup*)currentMAO)->addMarktoGroup(mark);;
    break;}
case 33:
#line 328 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable2DImage(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y(),yyvsp[0]. param_type ->int3,yyvsp[0]. param_type ->int4);delete yyvsp[0]. param_type ;;
    break;}
case 34:
#line 328 "Kernel/MSLParser.y"
{;
    break;}
case 35:
#line 330 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-9]. string_type ; yyval. param_type ->btvector1 = yyvsp[-6]. vector3_type ;  yyval. param_type ->int3 = yyvsp[-3]. int_type ; yyval. param_type ->int4 = yyvsp[0]. int_type ;;
    break;}
case 36:
#line 333 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable2DText(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->int1,*yyvsp[0]. param_type ->string2,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y()); ((MAORenderable2DText*)currentMAO)->setColor(yyvsp[0]. param_type ->btvector2->x(),yyvsp[0]. param_type ->btvector2->y(),yyvsp[0]. param_type ->btvector2->z()); delete yyvsp[0]. param_type ;;
    break;}
case 37:
#line 333 "Kernel/MSLParser.y"
{;
    break;}
case 38:
#line 335 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-12]. string_type ; yyval. param_type ->int1 = yyvsp[-9]. int_type ; yyval. param_type ->string2 = yyvsp[-6]. string_type ; yyval. param_type ->btvector1 = yyvsp[-3]. vector3_type ; yyval. param_type ->btvector2 = yyvsp[0]. vector3_type ;;
    break;}
case 39:
#line 338 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DOrj(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,*yyvsp[0]. param_type ->string1,*yyvsp[0]. param_type ->string2,*yyvsp[0]. param_type ->string3); delete yyvsp[0]. param_type ;;
    break;}
case 40:
#line 338 "Kernel/MSLParser.y"
{;
    break;}
case 41:
#line 340 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type  -> float1 = yyvsp[-9]. float_type ; yyval. param_type  -> string1 = yyvsp[-6]. string_type ; yyval. param_type  -> string2 = yyvsp[-3]. string_type ; yyval. param_type ->string3 = yyvsp[0]. string_type ;;
    break;}
case 42:
#line 343 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DLine(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,yyvsp[0]. param_type ->btvector1->x(), yyvsp[0]. param_type ->btvector1->y(), yyvsp[0]. param_type ->btvector1->z(),*yyvsp[0]. param_type ->string1,*yyvsp[0]. param_type ->string2); delete yyvsp[0]. param_type ;;
    break;}
case 43:
#line 343 "Kernel/MSLParser.y"
{;
    break;}
case 44:
#line 345 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->float1 = yyvsp[-9]. float_type ; yyval. param_type ->btvector1 = yyvsp[-6]. vector3_type ; yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type ->string2 = yyvsp[0]. string_type ;;
    break;}
case 45:
#line 348 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DPath(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y(),yyvsp[0]. param_type ->btvector1->z(), *yyvsp[0]. param_type ->string1); delete yyvsp[0]. param_type ;;
    break;}
case 46:
#line 348 "Kernel/MSLParser.y"
{;
    break;}
case 47:
#line 350 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->float1 = yyvsp[-6]. float_type ; yyval. param_type ->btvector1 = yyvsp[-3]. vector3_type ; yyval. param_type  -> string1 = yyvsp[0]. string_type  ;;
    break;}
case 48:
#line 353 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DTeapot(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1, *yyvsp[0]. param_type ->string1); delete yyvsp[0]. param_type ;;
    break;}
case 49:
#line 353 "Kernel/MSLParser.y"
{;
    break;}
case 50:
#line 355 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->float1 = yyvsp[-3]. float_type ; yyval. param_type ->string1 = yyvsp[0]. string_type ;;
    break;}
case 51:
#line 359 "Kernel/MSLParser.y"
{ PhysicsController::getInstance()->initPhysics(); PhysicsController::getInstance()->setMAOGround(*((MAOPositionator3D*)currentMAO),*yyvsp[-5]. string_type ,yyvsp[-2]. float_type ,yyvsp[-1]. param_type ->bool1,yyvsp[-1]. param_type ->btvector1); delete yyvsp[-1]. param_type ;;
    break;}
case 52:
#line 360 "Kernel/MSLParser.y"
{;
    break;}
case 53:
#line 362 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->bool1 = yyvsp[-3]. bool_type ; yyval. param_type ->btvector1 = yyvsp[0]. vector3_type ;;
    break;}
case 54:
#line 363 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 55:
#line 367 "Kernel/MSLParser.y"
{PhysicsController::getInstance()->addDynamicRigidBody(*((MAORenderable3D*)currentMAO),yyvsp[-1]. param_type ->float1,yyvsp[-1]. param_type ->pose1,yyvsp[-1]. param_type ->btvector1,*yyvsp[-1]. param_type ->string1);  ((MAORenderable3D*)currentMAO)->setCollisionShapeType(*yyvsp[-1]. param_type ->string1);delete yyvsp[-1]. param_type ;;
    break;}
case 56:
#line 368 "Kernel/MSLParser.y"
{PhysicsController::getInstance()->addStaticRigidBody(*((MAORenderable3D*)currentMAO),*yyvsp[-1]. string_type ); ((MAORenderable3D*)currentMAO)->setCollisionShapeType(*yyvsp[-1]. string_type );delete yyvsp[-1]. string_type ;;
    break;}
case 57:
#line 369 "Kernel/MSLParser.y"
{;
    break;}
case 58:
#line 372 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-4]. float_type ; yyval. param_type ->string1 = yyvsp[-1]. string_type ; delete yyvsp[0]. param_type ;;
    break;}
case 59:
#line 374 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(*yyvsp[-3]. param_type ); yyval. param_type ->pose1 = yyvsp[0]. pose_type ; delete yyvsp[-3]. param_type ;;
    break;}
case 60:
#line 375 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-3]. param_type ); yyval. param_type ->btvector1 = yyvsp[0]. vector3_type ; delete yyvsp[-3]. param_type ;;
    break;}
case 61:
#line 376 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 62:
#line 382 "Kernel/MSLParser.y"
{;
    break;}
case 63:
#line 383 "Kernel/MSLParser.y"
{;
    break;}
case 64:
#line 386 "Kernel/MSLParser.y"
{;
    break;}
case 65:
#line 387 "Kernel/MSLParser.y"
{;
    break;}
case 66:
#line 388 "Kernel/MSLParser.y"
{;
    break;}
case 67:
#line 391 "Kernel/MSLParser.y"
{;
    break;}
case 68:
#line 394 "Kernel/MSLParser.y"
{;
    break;}
case 69:
#line 395 "Kernel/MSLParser.y"
{;
    break;}
case 70:
#line 396 "Kernel/MSLParser.y"
{;
    break;}
case 71:
#line 397 "Kernel/MSLParser.y"
{;
    break;}
case 72:
#line 398 "Kernel/MSLParser.y"
{;
    break;}
case 73:
#line 399 "Kernel/MSLParser.y"
{;
    break;}
case 74:
#line 400 "Kernel/MSLParser.y"
{;
    break;}
case 75:
#line 401 "Kernel/MSLParser.y"
{;
    break;}
case 76:
#line 402 "Kernel/MSLParser.y"
{;
    break;}
case 77:
#line 403 "Kernel/MSLParser.y"
{;
    break;}
case 78:
#line 404 "Kernel/MSLParser.y"
{;
    break;}
case 79:
#line 405 "Kernel/MSLParser.y"
{;
    break;}
case 80:
#line 406 "Kernel/MSLParser.y"
{;
    break;}
case 81:
#line 409 "Kernel/MSLParser.y"
{;
    break;}
case 82:
#line 410 "Kernel/MSLParser.y"
{;
    break;}
case 83:
#line 411 "Kernel/MSLParser.y"
{;
    break;}
case 84:
#line 412 "Kernel/MSLParser.y"
{;
    break;}
case 85:
#line 413 "Kernel/MSLParser.y"
{;
    break;}
case 86:
#line 416 "Kernel/MSLParser.y"
{;
    break;}
case 87:
#line 417 "Kernel/MSLParser.y"
{;
    break;}
case 88:
#line 418 "Kernel/MSLParser.y"
{;
    break;}
case 89:
#line 419 "Kernel/MSLParser.y"
{;
    break;}
case 90:
#line 420 "Kernel/MSLParser.y"
{;
    break;}
case 91:
#line 421 "Kernel/MSLParser.y"
{;
    break;}
case 92:
#line 422 "Kernel/MSLParser.y"
{;
    break;}
case 93:
#line 423 "Kernel/MSLParser.y"
{;
    break;}
case 94:
#line 433 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorAddDynamicObject(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1,yyvsp[-1]. param_type ->int1,yyvsp[-1]. param_type ->pose1,yyvsp[-1]. param_type ->btvector1); delete yyvsp[-1]. param_type ;;
    break;}
case 95:
#line 435 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ; delete yyvsp[0]. param_type ;;
    break;}
case 96:
#line 437 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-3]. param_type ); yyval. param_type ->int1 = yyvsp[0]. int_type ; delete yyvsp[-3]. param_type ; ;
    break;}
case 97:
#line 438 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-3]. param_type ); yyval. param_type ->pose1 = yyvsp[0]. pose_type ; delete yyvsp[-3]. param_type ;;
    break;}
case 98:
#line 439 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-3]. param_type ); yyval. param_type ->btvector1=yyvsp[0]. vector3_type ; delete yyvsp[-3]. param_type ;;
    break;}
case 99:
#line 440 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 100:
#line 443 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorAng(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->string2); delete yyvsp[-1]. param_type ;;
    break;}
case 101:
#line 445 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->string2 = yyvsp[0]. string_type ;;
    break;}
case 102:
#line 448 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorChangePose(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, yyvsp[-1]. param_type ->btvector1, *yyvsp[-1]. param_type ->string2, yyvsp[-1]. param_type ->btvector2); delete yyvsp[-1]. param_type ;;
    break;}
case 103:
#line 450 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-1]. param_type ); yyval. param_type ->fill(*yyvsp[0]. param_type ); delete yyvsp[-1]. param_type ; delete yyvsp[0]. param_type ;;
    break;}
case 104:
#line 451 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type ->btvector1 = yyvsp[0]. vector3_type ;;
    break;}
case 105:
#line 452 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string2 = yyvsp[-3]. string_type ; yyval. param_type ->btvector2 = yyvsp[0]. vector3_type ;;
    break;}
case 106:
#line 455 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorDistance(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1); delete yyvsp[-1]. param_type ;;
    break;}
case 107:
#line 457 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[0]. maoproperty_type ;;
    break;}
case 108:
#line 460 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorPathAddPoint(*yyvsp[-3]. string_type ,currentMAO->getName()); delete yyvsp[-1]. param_type ;;
    break;}
case 109:
#line 463 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 110:
#line 466 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorPathRemovePoints(*yyvsp[-3]. string_type ,currentMAO->getName()); delete yyvsp[-1]. param_type ;;
    break;}
case 111:
#line 468 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 112:
#line 471 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorProperty(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->maovalue1,*yyvsp[-1]. param_type ->string1); delete yyvsp[-1]. param_type ;;
    break;}
case 113:
#line 472 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorProperty(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->maoproperty2,*yyvsp[-1]. param_type ->string1); delete yyvsp[-1]. param_type ;;
    break;}
case 114:
#line 474 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  ->string1 = yyvsp[-6]. string_type ; yyval. param_type  ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type  -> maovalue1 = yyvsp[0]. maovalue_type ;;
    break;}
case 115:
#line 476 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  ->string1 = yyvsp[-6]. string_type ; yyval. param_type  ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type  -> maoproperty2 = yyvsp[0]. maoproperty_type ;;
    break;}
case 116:
#line 479 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorQuitApp(*yyvsp[-3]. string_type ,currentMAO->getName()); delete yyvsp[-1]. param_type ;;
    break;}
case 117:
#line 481 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties();;
    break;}
case 118:
#line 484 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorRandom(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1); delete yyvsp[-1]. param_type ;;
    break;}
case 119:
#line 486 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> maoproperty1 = yyvsp[0]. maoproperty_type ;;
    break;}
case 120:
#line 489 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorRelativePose(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->bool1); delete yyvsp[-1]. param_type ;;
    break;}
case 121:
#line 491 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-6]. string_type ; yyval. param_type  -> maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->bool1 = yyvsp[0]. bool_type ;;
    break;}
case 122:
#line 494 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorSound(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1); delete yyvsp[-1]. param_type ;;
    break;}
case 123:
#line 496 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[0]. string_type ; ;
    break;}
case 124:
#line 499 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorVisibility(*yyvsp[-3]. string_type , currentMAO->getName(), yyvsp[-1]. param_type ->bool1); delete yyvsp[-1]. param_type ;;
    break;}
case 125:
#line 501 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> bool1 = yyvsp[0]. bool_type ;;
    break;}
case 126:
#line 504 "Kernel/MSLParser.y"
{ MLBFactory::getInstance()->addMLBActuatorAnimOrej(*yyvsp[-3]. string_type , currentMAO->getName(), *yyvsp[-1]. param_type ->string1, yyvsp[-1]. param_type ->string2); delete yyvsp[-1]. param_type ;;
    break;}
case 127:
#line 506 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type  -> string2 = yyvsp[0]. string_type ;;
    break;}
case 128:
#line 507 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[0]. string_type ;;
    break;}
case 129:
#line 511 "Kernel/MSLParser.y"
{;
    break;}
case 130:
#line 513 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 131:
#line 514 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 132:
#line 515 "Kernel/MSLParser.y"
{;
    break;}
case 133:
#line 518 "Kernel/MSLParser.y"
{;
    break;}
case 134:
#line 520 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 135:
#line 521 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 136:
#line 522 "Kernel/MSLParser.y"
{;
    break;}
case 137:
#line 525 "Kernel/MSLParser.y"
{;
    break;}
case 138:
#line 527 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 139:
#line 528 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 140:
#line 529 "Kernel/MSLParser.y"
{;
    break;}
case 141:
#line 532 "Kernel/MSLParser.y"
{;
    break;}
case 142:
#line 534 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 143:
#line 535 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 144:
#line 536 "Kernel/MSLParser.y"
{;
    break;}
case 145:
#line 539 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerScript(*yyvsp[-5]. string_type ,currentMAO->getName(),*yyvsp[-1]. string_type ); delete yyvsp[-1]. string_type ;;
    break;}
case 146:
#line 545 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorActuator(*yyvsp[-3]. string_type , currentMAO->getName(), *yyvsp[-1]. param_type ->string1); delete yyvsp[-1]. param_type ;;
    break;}
case 147:
#line 547 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> string1 = yyvsp[0]. string_type ;;
    break;}
case 148:
#line 550 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorAlways(*yyvsp[-3]. string_type , currentMAO->getName()); delete yyvsp[-1]. param_type ;;
    break;}
case 149:
#line 552 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 150:
#line 555 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorCollision(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1); delete yyvsp[-1]. param_type ;;
    break;}
case 151:
#line 557 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type  -> string1 = yyvsp[0]. string_type ;;
    break;}
case 152:
#line 560 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorDelay(*yyvsp[-3]. string_type , currentMAO->getName(),yyvsp[-1]. param_type ->int1); delete yyvsp[-1]. param_type ;;
    break;}
case 153:
#line 562 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> int1 = yyvsp[0]. int_type ;;
    break;}
case 154:
#line 565 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorKeyboard(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->string2); delete yyvsp[-1]. param_type ;;
    break;}
case 155:
#line 567 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type  -> string1 = yyvsp[-3]. string_type ; yyval. param_type  -> string2 = yyvsp[0]. string_type ;;
    break;}
case 156:
#line 570 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorNear(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1,yyvsp[-1]. param_type ->float1); delete yyvsp[-1]. param_type ;;
    break;}
case 157:
#line 572 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  ->string1 = yyvsp[-3]. string_type ; yyval. param_type ->float1 = yyvsp[0]. float_type ;;
    break;}
case 158:
#line 575 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorProperty(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->maovalue1, yyvsp[-1]. param_type ->maovalue2); delete yyvsp[-1]. param_type ;;
    break;}
case 159:
#line 576 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorProperty(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->maoproperty2); delete yyvsp[-1]. param_type ;;
    break;}
case 160:
#line 578 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-6]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->maovalue1 = yyvsp[0]. maovalue_type ;;
    break;}
case 161:
#line 579 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-9]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-6]. maoproperty_type ; yyval. param_type ->maovalue1 = yyvsp[-3]. maovalue_type ; yyval. param_type ->maovalue2 = yyvsp[0]. maovalue_type ;;
    break;}
case 162:
#line 581 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-6]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->maoproperty2 = yyvsp[0]. maoproperty_type ;;
    break;}
case 163:
#line 584 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorRandom(*yyvsp[-3]. string_type ,currentMAO->getName(),yyvsp[-1]. param_type ->float1); delete yyvsp[-1]. param_type ;;
    break;}
case 164:
#line 586 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->float1 = yyvsp[0]. float_type ;;
    break;}
case 165:
#line 592 "Kernel/MSLParser.y"
{;
    break;}
case 166:
#line 593 "Kernel/MSLParser.y"
{;
    break;}
case 167:
#line 595 "Kernel/MSLParser.y"
{
				for(unsigned int i=0;i<yyvsp[-4]. vectorstr_type->size();i++){
					MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*(yyvsp[-4]. vectorstr_type->at(i)),*yyvsp[-2]. string_type );
				}

				for(unsigned int i=0;i<yyvsp[0]. vectorstr_type->size();i++){
					MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*yyvsp[-2]. string_type ,*(yyvsp[0]. vectorstr_type->at(i)));
				}
				delete yyvsp[-4]. vectorstr_type; delete yyvsp[0]. vectorstr_type;;
    break;}
case 168:
#line 604 "Kernel/MSLParser.y"
{
				for(unsigned int i=0;i<yyvsp[-2]. vectorstr_type->size();i++){
					for(unsigned int j=0;j<yyvsp[0]. vectorstr_type->size();j++){
						MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*(yyvsp[-2]. vectorstr_type->at(i)),*(yyvsp[0]. vectorstr_type->at(j)));
					}
				}
				delete yyvsp[-2]. vectorstr_type; ;
    break;}
case 169:
#line 613 "Kernel/MSLParser.y"
{
					yyval. vectorstr_type = new std::vector<std::string*>(); yyval. vectorstr_type->push_back(yyvsp[-2]. string_type );
					for(unsigned int i=0;i<yyvsp[0]. vectorstr_type->size();i++){
						yyval. vectorstr_type->push_back(yyvsp[0]. vectorstr_type->at(i));
					}
					delete yyvsp[0]. vectorstr_type;
					;
    break;}
case 170:
#line 620 "Kernel/MSLParser.y"
{yyval. vectorstr_type = new std::vector<std::string*>(); yyval. vectorstr_type->push_back(yyvsp[0]. string_type );;
    break;}
case 171:
#line 627 "Kernel/MSLParser.y"
{ yyval. int_type  = atoi(lexer.YYText());;
    break;}
case 172:
#line 630 "Kernel/MSLParser.y"
{if(strcmp(lexer.YYText(),"False")==0) yyval. bool_type  = false; else yyval. bool_type  = true;;
    break;}
case 173:
#line 633 "Kernel/MSLParser.y"
{yyval. float_type  = atof(lexer.YYText());;
    break;}
case 174:
#line 636 "Kernel/MSLParser.y"
{int l = strlen(lexer.YYText()); yyval. string_type  = new std::string(lexer.YYText()+1,l-2);;
    break;}
case 175:
#line 639 "Kernel/MSLParser.y"
{float* f = new float[16];f[0]=yyvsp[-15]. float_type ; f[1]=yyvsp[-14]. float_type ;f[2]=yyvsp[-13]. float_type ;f[3]=yyvsp[-12]. float_type ;
f[4]=yyvsp[-11]. float_type ; f[5]=yyvsp[-10]. float_type ;f[6]=yyvsp[-9]. float_type ;f[7]=yyvsp[-8]. float_type ;
f[8]=yyvsp[-7]. float_type ; f[9]=yyvsp[-6]. float_type ;f[10]=yyvsp[-5]. float_type ;f[11]=yyvsp[-4]. float_type ;
f[12]=yyvsp[-3]. float_type ; f[13]=yyvsp[-2]. float_type ;f[14]=yyvsp[-1]. float_type ;f[15]=yyvsp[0]. float_type ;
cv::Mat* m = new cv::Mat(4,4,CV_32F,(void*) f); yyval. pose_type  = m;;
    break;}
case 176:
#line 646 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_INT, yyvsp[0]. int_type );;
    break;}
case 177:
#line 647 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_BOOLEAN, yyvsp[0]. bool_type );
    break;}
case 178:
#line 648 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_FLOAT, yyvsp[0]. float_type );
    break;}
case 179:
#line 649 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_STRING, yyvsp[0]. string_type );
    break;}
case 180:
#line 650 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_POSE, yyvsp[0]. pose_type );
    break;}
case 181:
#line 653 "Kernel/MSLParser.y"
{ yyval. maoproperty_type  = &MAOFactory::getInstance()->findProperty(*yyvsp[-2]. string_type ,*yyvsp[0]. string_type ); ;
    break;}
case 182:
#line 654 "Kernel/MSLParser.y"
{yyval. maoproperty_type  = &MAOFactory::getInstance()->findProperty(currentMAO->getName(),*yyvsp[0]. string_type );;
    break;}
case 183:
#line 657 "Kernel/MSLParser.y"
{ yyval. vector3_type  = new btVector3(yyvsp[-3]. int_type ,yyvsp[-1]. int_type ,-1);;
    break;}
case 184:
#line 659 "Kernel/MSLParser.y"
{ yyval. vector3_type  = new btVector3(yyvsp[-3]. float_type ,yyvsp[-1]. float_type ,-1);;
    break;}
case 185:
#line 662 "Kernel/MSLParser.y"
{yyval. vector3_type  = new btVector3(yyvsp[-5]. int_type ,yyvsp[-3]. int_type ,yyvsp[-1]. int_type );;
    break;}
case 186:
#line 665 "Kernel/MSLParser.y"
{yyval. vector3_type  = new btVector3(yyvsp[-5]. float_type ,yyvsp[-3]. float_type ,yyvsp[-1]. float_type );;
    break;}
case 187:
#line 668 "Kernel/MSLParser.y"
{ yyval. string_type  = new std::string(lexer.YYText());;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_MSLParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_MSLParser_LLOC.first_line;
      yylsp->first_column = YY_MSLParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_MSLParser_NERRS;

#ifdef YY_MSLParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_MSLParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_MSLParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_MSLParser_ERROR_VERBOSE */
	YY_MSLParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_MSLParser_CHAR == YYEOF)
	YYABORT;

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_MSLParser_CHAR, yytname[yychar1]);
#endif

      YY_MSLParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
  *++yylsp = YY_MSLParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 671 "Kernel/MSLParser.y"

