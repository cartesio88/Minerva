#define YY_MSLParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from Kernel/MSLParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_MSLParser_LSP_NEEDED 
#define YY_MSLParser_MEMBERS \
	virtual ~MSLParser(){}\
	private:\
		yyFlexLexer lexer;\
		MAO* currentMAO;
#define YY_MSLParser_LEX_BODY  {return lexer.yylex();}
#define YY_MSLParser_ERROR_BODY  {std::cout <<std::endl<<"~ MSL Error Reporting ~"<<std::endl;\
					std::cout<< "-----------------------"<<std::endl;\
					std::cout<< "Error encountered at line: "<<lexer.lineno()<<std::endl;\
					std::cout<< "Last symbol parsed: "<<lexer.YYText()<<std::endl;\
					std::cout<< "Exiting..."<<std::endl;\
					exit(-1);\
					}
#line 22 "Kernel/MSLParser.y"

#include <cstdlib>
#include <FlexLexer.h>
#include <cv.h>
#include <btBulletDynamicsCommon.h>

#include <Kernel/MSLProperties.h>
#include <Kernel/Logger.h>
#include <Factories/MAOFactory.h>
#include <Factories/MLBFactory.h>

#line 38 "Kernel/MSLParser.y"
typedef union {
	int int_type;
	bool bool_type;
	float float_type;
	std::string* string_type;
	cv::Mat* pose_type;
	MSLProperties* param_type;
	btVector3* vector3_type;
	MAOValue* maovalue_type;
	MAOProperty* maoproperty_type;
	std::vector<std::string*>* vectorstr_type;
} yy_MSLParser_stype;
#define YY_MSLParser_STYPE yy_MSLParser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_MSLParser_BISON 1

#ifndef YY_MSLParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_MSLParser_COMPATIBILITY 1
 #else
  #define  YY_MSLParser_COMPATIBILITY 0
 #endif
#endif

#if YY_MSLParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_MSLParser_LTYPE
   #define YY_MSLParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_MSLParser_STYPE 
   #define YY_MSLParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_MSLParser_DEBUG
   #define  YY_MSLParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_MSLParser_USE_GOTO
  #define YY_MSLParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_MSLParser_USE_GOTO
 #define YY_MSLParser_USE_GOTO 0
#endif

#ifndef YY_MSLParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_MSLParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_MSLParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_MSLParser_DEBUG */
#endif


#ifndef YY_MSLParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_MSLParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_MSLParser_LSP_NEEDED
#ifndef YY_MSLParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_MSLParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_MSLParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_MSLParser_STYPE
#define YY_MSLParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_MSLParser_PARSE
#define YY_MSLParser_PARSE yyparse
#endif
#ifndef YY_MSLParser_LEX
#define YY_MSLParser_LEX yylex
#endif
#ifndef YY_MSLParser_LVAL
#define YY_MSLParser_LVAL yylval
#endif
#ifndef YY_MSLParser_LLOC
#define YY_MSLParser_LLOC yylloc
#endif
#ifndef YY_MSLParser_CHAR
#define YY_MSLParser_CHAR yychar
#endif
#ifndef YY_MSLParser_NERRS
#define YY_MSLParser_NERRS yynerrs
#endif
#ifndef YY_MSLParser_DEBUG_FLAG
#define YY_MSLParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_MSLParser_ERROR
#define YY_MSLParser_ERROR yyerror
#endif

#ifndef YY_MSLParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_MSLParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_MSLParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_MSLParser_PARSE_PARAM
  #define YY_MSLParser_PARSE_PARAM void
 #endif
#endif

#if YY_MSLParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_MSLParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_MSLParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_MSLParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_MSLParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_MSLParser_PURE
#  endif
#endif

#ifdef YY_MSLParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_MSLParser_DEBUG 
#  endif
#endif

#ifndef YY_MSLParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_MSLParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_MSLParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_MSLParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	INTEGER	258
#define	T_INTEGER	259
#define	FLOAT	260
#define	T_FLOAT	261
#define	STRING	262
#define	T_STRING	263
#define	BOOL	264
#define	T_BOOL	265
#define	T_POSE	266
#define	IDENTIFIER	267
#define	ARROW	268
#define	DOT	269
#define	PARAM_NAME	270
#define	PARAM_PATH	271
#define	PARAM_SIZE	272
#define	PARAM_MARKS	273
#define	PARAM_POS	274
#define	PARAM_COLOR	275
#define	PARAM_WIDTH	276
#define	PARAM_HEIGHT	277
#define	PARAM_TEXT	278
#define	PARAM_ANIM_TYPE	279
#define	PARAM_REFERENCE	280
#define	PARAM_MAO	281
#define	PARAM_TIME	282
#define	PARAM_OFFSET	283
#define	PARAM_IMPULSE	284
#define	PARAM_ANG_AXIS	285
#define	PARAM_PROPERTY	286
#define	PARAM_ROT_TYPE	287
#define	PARAM_LOC_TYPE	288
#define	PARAM_ROTATION	289
#define	PARAM_LOCATION	290
#define	PARAM_TYPE	291
#define	PARAM_VALUE	292
#define	PARAM_VALUE1	293
#define	PARAM_VALUE2	294
#define	PARAM_ACTUATOR	295
#define	PARAM_KEY	296
#define	PARAM_DISTANCE	297
#define	PARAM_PROBABILITY	298
#define	PARAM_INVERSE	299
#define	PARAM_GRAVITY	300
#define	PARAM_AXIS	301
#define	PARAM_MASS	302
#define	PARAM_SHAPE	303
#define	PARAM_SHADOWS	304
#define	PARAM_SUN	305
#define	MAOWORLD	306
#define	MAOMARK	307
#define	MAOMARKSGROUP	308
#define	MAORENDERABLE2DIMAGE	309
#define	MAORENDERABLE2DTEXT	310
#define	MAORENDERABLE3DLINE	311
#define	MAORENDERABLE3DMODEL	312
#define	MAORENDERABLE3DPATH	313
#define	MLBACTUATORADDDYNAMICOBJECT	314
#define	MLBACTUATORANG	315
#define	MLBACTUATORCHANGEPOSE	316
#define	MLBACTUATORDISTANCE	317
#define	MLBACTUATORPATHADDPOINT	318
#define	MLBACTUATORPATHREMOVEPOINTS	319
#define	MLBACTUATORPROPERTY	320
#define	MLBACTUATORQUITAPP	321
#define	MLBACTUATORRANDOM	322
#define	MLBACTUATORRELATIVEPOSE	323
#define	MLBACTUATORSOUND	324
#define	MLBACTUATORVISIBILITY	325
#define	MLBACTUATORANIM	326
#define	MLBCONTROLLERAND	327
#define	MLBCONTROLLERNAND	328
#define	MLBCONTROLLERNOR	329
#define	MLBCONTROLLEROR	330
#define	MLBCONTROLLERSCRIPT	331
#define	MLBSENSORACTUATOR	332
#define	MLBSENSORALWAYS	333
#define	MLBSENSORCOLLISION	334
#define	MLBSENSORDELAY	335
#define	MLBSENSORKEYBOARD	336
#define	MLBSENSORNEAR	337
#define	MLBSENSORPROPERTY	338
#define	MLBSENSORRANDOM	339
#define	GROUND	340
#define	DYNAMICOBJECT	341
#define	STATICOBJECT	342


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_MSLParser_CLASS
#define YY_MSLParser_CLASS MSLParser
#endif
#ifndef YY_MSLParser_INHERIT
#define YY_MSLParser_INHERIT
#endif
#ifndef YY_MSLParser_MEMBERS
#define YY_MSLParser_MEMBERS 
#endif
#ifndef YY_MSLParser_LEX_BODY
#define YY_MSLParser_LEX_BODY  
#endif
#ifndef YY_MSLParser_ERROR_BODY
#define YY_MSLParser_ERROR_BODY  
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_PARAM
#define YY_MSLParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_CODE
#define YY_MSLParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_MSLParser_CONSTRUCTOR_INIT
#define YY_MSLParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_MSLParser_USE_CONST_TOKEN
#define YY_MSLParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_MSLParser_USE_CONST_TOKEN != 0
#ifndef YY_MSLParser_ENUM_TOKEN
#define YY_MSLParser_ENUM_TOKEN yy_MSLParser_enum_token
#endif
#endif

class YY_MSLParser_CLASS YY_MSLParser_INHERIT
{
public: 
#if YY_MSLParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int INTEGER;
static const int T_INTEGER;
static const int FLOAT;
static const int T_FLOAT;
static const int STRING;
static const int T_STRING;
static const int BOOL;
static const int T_BOOL;
static const int T_POSE;
static const int IDENTIFIER;
static const int ARROW;
static const int DOT;
static const int PARAM_NAME;
static const int PARAM_PATH;
static const int PARAM_SIZE;
static const int PARAM_MARKS;
static const int PARAM_POS;
static const int PARAM_COLOR;
static const int PARAM_WIDTH;
static const int PARAM_HEIGHT;
static const int PARAM_TEXT;
static const int PARAM_ANIM_TYPE;
static const int PARAM_REFERENCE;
static const int PARAM_MAO;
static const int PARAM_TIME;
static const int PARAM_OFFSET;
static const int PARAM_IMPULSE;
static const int PARAM_ANG_AXIS;
static const int PARAM_PROPERTY;
static const int PARAM_ROT_TYPE;
static const int PARAM_LOC_TYPE;
static const int PARAM_ROTATION;
static const int PARAM_LOCATION;
static const int PARAM_TYPE;
static const int PARAM_VALUE;
static const int PARAM_VALUE1;
static const int PARAM_VALUE2;
static const int PARAM_ACTUATOR;
static const int PARAM_KEY;
static const int PARAM_DISTANCE;
static const int PARAM_PROBABILITY;
static const int PARAM_INVERSE;
static const int PARAM_GRAVITY;
static const int PARAM_AXIS;
static const int PARAM_MASS;
static const int PARAM_SHAPE;
static const int PARAM_SHADOWS;
static const int PARAM_SUN;
static const int MAOWORLD;
static const int MAOMARK;
static const int MAOMARKSGROUP;
static const int MAORENDERABLE2DIMAGE;
static const int MAORENDERABLE2DTEXT;
static const int MAORENDERABLE3DLINE;
static const int MAORENDERABLE3DMODEL;
static const int MAORENDERABLE3DPATH;
static const int MLBACTUATORADDDYNAMICOBJECT;
static const int MLBACTUATORANG;
static const int MLBACTUATORCHANGEPOSE;
static const int MLBACTUATORDISTANCE;
static const int MLBACTUATORPATHADDPOINT;
static const int MLBACTUATORPATHREMOVEPOINTS;
static const int MLBACTUATORPROPERTY;
static const int MLBACTUATORQUITAPP;
static const int MLBACTUATORRANDOM;
static const int MLBACTUATORRELATIVEPOSE;
static const int MLBACTUATORSOUND;
static const int MLBACTUATORVISIBILITY;
static const int MLBACTUATORANIM;
static const int MLBCONTROLLERAND;
static const int MLBCONTROLLERNAND;
static const int MLBCONTROLLERNOR;
static const int MLBCONTROLLEROR;
static const int MLBCONTROLLERSCRIPT;
static const int MLBSENSORACTUATOR;
static const int MLBSENSORALWAYS;
static const int MLBSENSORCOLLISION;
static const int MLBSENSORDELAY;
static const int MLBSENSORKEYBOARD;
static const int MLBSENSORNEAR;
static const int MLBSENSORPROPERTY;
static const int MLBSENSORRANDOM;
static const int GROUND;
static const int DYNAMICOBJECT;
static const int STATICOBJECT;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_MSLParser_ENUM_TOKEN { YY_MSLParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,INTEGER=258
	,T_INTEGER=259
	,FLOAT=260
	,T_FLOAT=261
	,STRING=262
	,T_STRING=263
	,BOOL=264
	,T_BOOL=265
	,T_POSE=266
	,IDENTIFIER=267
	,ARROW=268
	,DOT=269
	,PARAM_NAME=270
	,PARAM_PATH=271
	,PARAM_SIZE=272
	,PARAM_MARKS=273
	,PARAM_POS=274
	,PARAM_COLOR=275
	,PARAM_WIDTH=276
	,PARAM_HEIGHT=277
	,PARAM_TEXT=278
	,PARAM_ANIM_TYPE=279
	,PARAM_REFERENCE=280
	,PARAM_MAO=281
	,PARAM_TIME=282
	,PARAM_OFFSET=283
	,PARAM_IMPULSE=284
	,PARAM_ANG_AXIS=285
	,PARAM_PROPERTY=286
	,PARAM_ROT_TYPE=287
	,PARAM_LOC_TYPE=288
	,PARAM_ROTATION=289
	,PARAM_LOCATION=290
	,PARAM_TYPE=291
	,PARAM_VALUE=292
	,PARAM_VALUE1=293
	,PARAM_VALUE2=294
	,PARAM_ACTUATOR=295
	,PARAM_KEY=296
	,PARAM_DISTANCE=297
	,PARAM_PROBABILITY=298
	,PARAM_INVERSE=299
	,PARAM_GRAVITY=300
	,PARAM_AXIS=301
	,PARAM_MASS=302
	,PARAM_SHAPE=303
	,PARAM_SHADOWS=304
	,PARAM_SUN=305
	,MAOWORLD=306
	,MAOMARK=307
	,MAOMARKSGROUP=308
	,MAORENDERABLE2DIMAGE=309
	,MAORENDERABLE2DTEXT=310
	,MAORENDERABLE3DLINE=311
	,MAORENDERABLE3DMODEL=312
	,MAORENDERABLE3DPATH=313
	,MLBACTUATORADDDYNAMICOBJECT=314
	,MLBACTUATORANG=315
	,MLBACTUATORCHANGEPOSE=316
	,MLBACTUATORDISTANCE=317
	,MLBACTUATORPATHADDPOINT=318
	,MLBACTUATORPATHREMOVEPOINTS=319
	,MLBACTUATORPROPERTY=320
	,MLBACTUATORQUITAPP=321
	,MLBACTUATORRANDOM=322
	,MLBACTUATORRELATIVEPOSE=323
	,MLBACTUATORSOUND=324
	,MLBACTUATORVISIBILITY=325
	,MLBACTUATORANIM=326
	,MLBCONTROLLERAND=327
	,MLBCONTROLLERNAND=328
	,MLBCONTROLLERNOR=329
	,MLBCONTROLLEROR=330
	,MLBCONTROLLERSCRIPT=331
	,MLBSENSORACTUATOR=332
	,MLBSENSORALWAYS=333
	,MLBSENSORCOLLISION=334
	,MLBSENSORDELAY=335
	,MLBSENSORKEYBOARD=336
	,MLBSENSORNEAR=337
	,MLBSENSORPROPERTY=338
	,MLBSENSORRANDOM=339
	,GROUND=340
	,DYNAMICOBJECT=341
	,STATICOBJECT=342


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_MSLParser_PARSE (YY_MSLParser_PARSE_PARAM);
 virtual void YY_MSLParser_ERROR(char *msg) YY_MSLParser_ERROR_BODY;
#ifdef YY_MSLParser_PURE
#ifdef YY_MSLParser_LSP_NEEDED
 virtual int  YY_MSLParser_LEX (YY_MSLParser_STYPE *YY_MSLParser_LVAL,YY_MSLParser_LTYPE *YY_MSLParser_LLOC) YY_MSLParser_LEX_BODY;
#else
 virtual int  YY_MSLParser_LEX (YY_MSLParser_STYPE *YY_MSLParser_LVAL) YY_MSLParser_LEX_BODY;
#endif
#else
 virtual int YY_MSLParser_LEX() YY_MSLParser_LEX_BODY;
 YY_MSLParser_STYPE YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
 YY_MSLParser_LTYPE YY_MSLParser_LLOC;
#endif
 int   YY_MSLParser_NERRS;
 int    YY_MSLParser_CHAR;
#endif
#if YY_MSLParser_DEBUG != 0
 int YY_MSLParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_MSLParser_CLASS(YY_MSLParser_CONSTRUCTOR_PARAM);
public:
 YY_MSLParser_MEMBERS 
};
/* other declare folow */
#if YY_MSLParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_MSLParser_CLASS::INTEGER=258;
const int YY_MSLParser_CLASS::T_INTEGER=259;
const int YY_MSLParser_CLASS::FLOAT=260;
const int YY_MSLParser_CLASS::T_FLOAT=261;
const int YY_MSLParser_CLASS::STRING=262;
const int YY_MSLParser_CLASS::T_STRING=263;
const int YY_MSLParser_CLASS::BOOL=264;
const int YY_MSLParser_CLASS::T_BOOL=265;
const int YY_MSLParser_CLASS::T_POSE=266;
const int YY_MSLParser_CLASS::IDENTIFIER=267;
const int YY_MSLParser_CLASS::ARROW=268;
const int YY_MSLParser_CLASS::DOT=269;
const int YY_MSLParser_CLASS::PARAM_NAME=270;
const int YY_MSLParser_CLASS::PARAM_PATH=271;
const int YY_MSLParser_CLASS::PARAM_SIZE=272;
const int YY_MSLParser_CLASS::PARAM_MARKS=273;
const int YY_MSLParser_CLASS::PARAM_POS=274;
const int YY_MSLParser_CLASS::PARAM_COLOR=275;
const int YY_MSLParser_CLASS::PARAM_WIDTH=276;
const int YY_MSLParser_CLASS::PARAM_HEIGHT=277;
const int YY_MSLParser_CLASS::PARAM_TEXT=278;
const int YY_MSLParser_CLASS::PARAM_ANIM_TYPE=279;
const int YY_MSLParser_CLASS::PARAM_REFERENCE=280;
const int YY_MSLParser_CLASS::PARAM_MAO=281;
const int YY_MSLParser_CLASS::PARAM_TIME=282;
const int YY_MSLParser_CLASS::PARAM_OFFSET=283;
const int YY_MSLParser_CLASS::PARAM_IMPULSE=284;
const int YY_MSLParser_CLASS::PARAM_ANG_AXIS=285;
const int YY_MSLParser_CLASS::PARAM_PROPERTY=286;
const int YY_MSLParser_CLASS::PARAM_ROT_TYPE=287;
const int YY_MSLParser_CLASS::PARAM_LOC_TYPE=288;
const int YY_MSLParser_CLASS::PARAM_ROTATION=289;
const int YY_MSLParser_CLASS::PARAM_LOCATION=290;
const int YY_MSLParser_CLASS::PARAM_TYPE=291;
const int YY_MSLParser_CLASS::PARAM_VALUE=292;
const int YY_MSLParser_CLASS::PARAM_VALUE1=293;
const int YY_MSLParser_CLASS::PARAM_VALUE2=294;
const int YY_MSLParser_CLASS::PARAM_ACTUATOR=295;
const int YY_MSLParser_CLASS::PARAM_KEY=296;
const int YY_MSLParser_CLASS::PARAM_DISTANCE=297;
const int YY_MSLParser_CLASS::PARAM_PROBABILITY=298;
const int YY_MSLParser_CLASS::PARAM_INVERSE=299;
const int YY_MSLParser_CLASS::PARAM_GRAVITY=300;
const int YY_MSLParser_CLASS::PARAM_AXIS=301;
const int YY_MSLParser_CLASS::PARAM_MASS=302;
const int YY_MSLParser_CLASS::PARAM_SHAPE=303;
const int YY_MSLParser_CLASS::PARAM_SHADOWS=304;
const int YY_MSLParser_CLASS::PARAM_SUN=305;
const int YY_MSLParser_CLASS::MAOWORLD=306;
const int YY_MSLParser_CLASS::MAOMARK=307;
const int YY_MSLParser_CLASS::MAOMARKSGROUP=308;
const int YY_MSLParser_CLASS::MAORENDERABLE2DIMAGE=309;
const int YY_MSLParser_CLASS::MAORENDERABLE2DTEXT=310;
const int YY_MSLParser_CLASS::MAORENDERABLE3DLINE=311;
const int YY_MSLParser_CLASS::MAORENDERABLE3DMODEL=312;
const int YY_MSLParser_CLASS::MAORENDERABLE3DPATH=313;
const int YY_MSLParser_CLASS::MLBACTUATORADDDYNAMICOBJECT=314;
const int YY_MSLParser_CLASS::MLBACTUATORANG=315;
const int YY_MSLParser_CLASS::MLBACTUATORCHANGEPOSE=316;
const int YY_MSLParser_CLASS::MLBACTUATORDISTANCE=317;
const int YY_MSLParser_CLASS::MLBACTUATORPATHADDPOINT=318;
const int YY_MSLParser_CLASS::MLBACTUATORPATHREMOVEPOINTS=319;
const int YY_MSLParser_CLASS::MLBACTUATORPROPERTY=320;
const int YY_MSLParser_CLASS::MLBACTUATORQUITAPP=321;
const int YY_MSLParser_CLASS::MLBACTUATORRANDOM=322;
const int YY_MSLParser_CLASS::MLBACTUATORRELATIVEPOSE=323;
const int YY_MSLParser_CLASS::MLBACTUATORSOUND=324;
const int YY_MSLParser_CLASS::MLBACTUATORVISIBILITY=325;
const int YY_MSLParser_CLASS::MLBACTUATORANIM=326;
const int YY_MSLParser_CLASS::MLBCONTROLLERAND=327;
const int YY_MSLParser_CLASS::MLBCONTROLLERNAND=328;
const int YY_MSLParser_CLASS::MLBCONTROLLERNOR=329;
const int YY_MSLParser_CLASS::MLBCONTROLLEROR=330;
const int YY_MSLParser_CLASS::MLBCONTROLLERSCRIPT=331;
const int YY_MSLParser_CLASS::MLBSENSORACTUATOR=332;
const int YY_MSLParser_CLASS::MLBSENSORALWAYS=333;
const int YY_MSLParser_CLASS::MLBSENSORCOLLISION=334;
const int YY_MSLParser_CLASS::MLBSENSORDELAY=335;
const int YY_MSLParser_CLASS::MLBSENSORKEYBOARD=336;
const int YY_MSLParser_CLASS::MLBSENSORNEAR=337;
const int YY_MSLParser_CLASS::MLBSENSORPROPERTY=338;
const int YY_MSLParser_CLASS::MLBSENSORRANDOM=339;
const int YY_MSLParser_CLASS::GROUND=340;
const int YY_MSLParser_CLASS::DYNAMICOBJECT=341;
const int YY_MSLParser_CLASS::STATICOBJECT=342;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_MSLParser_CLASS::token */
#endif
/*apres const  */
YY_MSLParser_CLASS::YY_MSLParser_CLASS(YY_MSLParser_CONSTRUCTOR_PARAM) YY_MSLParser_CONSTRUCTOR_INIT
{
#if YY_MSLParser_DEBUG != 0
YY_MSLParser_DEBUG_FLAG=0;
#endif
YY_MSLParser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		587
#define	YYFLAG		-32768
#define	YYNTBASE	94

#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 197)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    92,
    93,     2,     2,    91,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    88,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    89,     2,    90,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87
};

#if YY_MSLParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     8,    10,    12,    14,    16,    18,
    20,    23,    24,    29,    32,    37,    40,    45,    48,    53,
    56,    61,    64,    65,    76,    81,    86,    91,    92,    93,
   106,   110,   112,   113,   123,   128,   133,   138,   143,   144,
   145,   155,   160,   165,   170,   175,   180,   181,   182,   193,
   198,   203,   208,   209,   210,   221,   226,   231,   236,   241,
   242,   243,   254,   259,   264,   269,   270,   275,   276,   277,
   282,   287,   292,   297,   298,   303,   310,   311,   316,   321,
   326,   331,   332,   335,   336,   339,   342,   345,   346,   348,
   350,   352,   354,   356,   358,   360,   362,   364,   366,   368,
   370,   372,   374,   376,   378,   380,   382,   384,   386,   388,
   390,   392,   394,   396,   398,   404,   409,   414,   419,   424,
   425,   431,   436,   441,   442,   448,   451,   458,   465,   471,
   476,   481,   482,   488,   489,   495,   496,   502,   508,   518,
   528,   534,   535,   541,   545,   551,   556,   561,   566,   567,
   573,   577,   583,   587,   593,   600,   604,   607,   611,   613,
   614,   617,   621,   623,   624,   627,   631,   633,   634,   637,
   641,   643,   644,   652,   658,   662,   668,   669,   675,   679,
   685,   689,   695,   700,   705,   706,   712,   717,   722,   723,
   729,   735,   745,   758,   768,   774,   778,   781,   782,   788,
   792,   796,   798,   800,   802,   804,   806,   823,   825,   827,
   829,   831,   833,   837,   839,   845,   851,   859,   867
};

static const short yyrhs[] = {    95,
     0,    95,    96,     0,     0,    99,     0,   102,     0,   105,
     0,   108,     0,   111,     0,   114,     0,   117,     0,    97,
    98,     0,     0,     4,   196,    88,   186,     0,     4,   196,
     0,     6,   196,    88,   188,     0,     6,   196,     0,    10,
   196,    88,   187,     0,    10,   196,     0,     8,   196,    88,
   189,     0,     8,   196,     0,    11,   196,    88,   190,     0,
    11,   196,     0,     0,    52,   196,    89,   101,   100,    97,
   124,   183,   120,    90,     0,    16,    88,   189,   101,     0,
    17,    88,   188,   101,     0,    28,    88,   190,   101,     0,
     0,     0,    53,   196,    89,   103,    18,    88,   104,    97,
   124,   183,   120,    90,     0,   196,    91,   104,     0,   196,
     0,     0,    54,   196,    89,   107,   106,    97,   124,   183,
    90,     0,    16,    88,   189,   107,     0,    19,    88,   193,
   107,     0,    21,    88,   186,   107,     0,    22,    88,   186,
   107,     0,     0,     0,    55,   196,    89,   110,   109,    97,
   124,   183,    90,     0,    16,    88,   189,   110,     0,    17,
    88,   186,   110,     0,    23,    88,   189,   110,     0,    19,
    88,   193,   110,     0,    20,    88,   194,   110,     0,     0,
     0,    57,   196,    89,   113,   112,    97,   124,   183,   122,
    90,     0,    17,    88,   188,   113,     0,    16,    88,   189,
   113,     0,    25,    88,   196,   113,     0,     0,     0,    56,
   196,    89,   116,   115,    97,   124,   183,   122,    90,     0,
    17,    88,   188,   116,     0,    20,    88,   194,   116,     0,
    25,    88,   196,   116,     0,    25,    88,   196,   116,     0,
     0,     0,    58,   196,    89,   119,   118,    97,   124,   183,
   122,    90,     0,    17,    88,   188,   119,     0,    20,    88,
   194,   119,     0,    25,    88,   196,   119,     0,     0,    85,
    89,   121,    90,     0,     0,     0,    46,    88,   189,   121,
     0,    45,    88,   188,   121,     0,    49,    88,   187,   121,
     0,    50,    88,   195,   121,     0,     0,    86,    89,   123,
    90,     0,    87,    89,    48,    88,   189,    90,     0,     0,
    47,    88,   188,   123,     0,    48,    88,   189,   123,     0,
    28,    88,   190,   123,     0,    29,    88,   195,   123,     0,
     0,   124,   125,     0,     0,   126,   127,     0,   126,   128,
     0,   126,   129,     0,     0,   130,     0,   132,     0,   134,
     0,   136,     0,   138,     0,   140,     0,   142,     0,   145,
     0,   147,     0,   149,     0,   151,     0,   153,     0,   155,
     0,   157,     0,   159,     0,   161,     0,   163,     0,   165,
     0,   166,     0,   168,     0,   170,     0,   172,     0,   174,
     0,   176,     0,   178,     0,   181,     0,    59,   196,    89,
   131,    90,     0,    26,    88,   196,   131,     0,    27,    88,
   186,   131,     0,    28,    88,   190,   131,     0,    29,    88,
   195,   131,     0,     0,    60,   196,    89,   133,    90,     0,
    31,    88,   192,   133,     0,    30,    88,   189,   133,     0,
     0,    61,   196,    89,   135,    90,     0,   135,   135,     0,
    33,    88,   189,    35,    88,   195,     0,    32,    88,   189,
    34,    88,   195,     0,    62,   196,    89,   137,    90,     0,
    26,    88,   196,   137,     0,    31,    88,   192,   137,     0,
     0,    63,   196,    89,   139,    90,     0,     0,    64,   196,
    89,   141,    90,     0,     0,    65,   196,    89,   143,    90,
     0,    65,   196,    89,   144,    90,     0,    36,    88,   189,
    31,    88,   192,    37,    88,   191,     0,    36,    88,   189,
    31,    88,   192,    37,    88,   192,     0,    66,   196,    89,
   146,    90,     0,     0,    67,   196,    89,   148,    90,     0,
    31,    88,   192,     0,    68,   196,    89,   150,    90,     0,
    25,    88,   196,   150,     0,    31,    88,   192,   150,     0,
    44,    88,   187,   150,     0,     0,    69,   196,    89,   152,
    90,     0,    16,    88,   189,     0,    70,   196,    89,   154,
    90,     0,    37,    88,   187,     0,    71,   196,    89,   156,
    90,     0,    36,    88,   189,    24,    88,   189,     0,    36,
    88,   189,     0,    72,   158,     0,   158,    91,   196,     0,
   196,     0,     0,    73,   160,     0,   160,    91,   196,     0,
   196,     0,     0,    75,   162,     0,   162,    91,   196,     0,
   196,     0,     0,    74,   164,     0,   164,    91,   196,     0,
   196,     0,     0,    76,   196,    89,    16,    88,   189,    90,
     0,    77,   196,    89,   167,    90,     0,    40,    88,   196,
     0,    78,   196,    89,   169,    90,     0,     0,    79,   196,
    89,   171,    90,     0,    31,    88,   196,     0,    80,   196,
    89,   173,    90,     0,    27,    88,   186,     0,    81,   196,
    89,   175,    90,     0,    36,    88,   189,   175,     0,    41,
    88,   189,   175,     0,     0,    82,   196,    89,   177,    90,
     0,    31,    88,   196,   177,     0,    42,    88,   188,   177,
     0,     0,    83,   196,    89,   179,    90,     0,    83,   196,
    89,   180,    90,     0,    36,    88,   189,    31,    88,   192,
    37,    88,   191,     0,    36,    88,   189,    31,    88,   192,
    38,    88,   191,    39,    88,   191,     0,    36,    88,   189,
    31,    88,   192,    37,    88,   192,     0,    84,   196,    89,
   182,    90,     0,    43,    88,   188,     0,   183,   184,     0,
     0,   185,    13,   196,    13,   185,     0,   185,    13,   185,
     0,   196,    91,   185,     0,   196,     0,     3,     0,     9,
     0,     5,     0,     7,     0,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,     0,   186,     0,   187,     0,   188,     0,   189,     0,
   190,     0,   196,    14,   196,     0,   196,     0,    92,   186,
    91,   186,    93,     0,    92,   188,    91,   188,    93,     0,
    92,   186,    91,   186,    91,   186,    93,     0,    92,   188,
    91,   188,    91,   188,    93,     0,    12,     0
};

#endif

#if (YY_MSLParser_DEBUG != 0) || defined(YY_MSLParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   269,   272,   273,   276,   277,   278,   279,   280,   281,   282,
   285,   286,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   303,   303,   305,   306,   307,   308,   312,   312,
   315,   316,   320,   320,   322,   323,   324,   325,   326,   329,
   329,   331,   332,   333,   334,   335,   336,   339,   339,   341,
   342,   343,   344,   347,   347,   349,   350,   351,   352,   353,
   356,   356,   358,   359,   360,   361,   365,   366,   369,   369,
   370,   371,   372,   373,   377,   378,   379,   382,   383,   384,
   385,   386,   391,   392,   395,   396,   397,   400,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,   418,   419,   420,   421,   422,   425,   426,   427,   428,
   429,   430,   431,   432,   442,   444,   445,   446,   447,   448,
   451,   453,   454,   455,   458,   460,   461,   462,   465,   467,
   468,   469,   472,   475,   478,   480,   483,   484,   486,   488,
   491,   493,   496,   498,   501,   503,   504,   505,   506,   509,
   511,   514,   516,   519,   521,   522,   526,   528,   529,   530,
   533,   535,   536,   537,   540,   542,   543,   544,   547,   549,
   550,   551,   554,   560,   562,   565,   567,   570,   572,   575,
   577,   580,   582,   583,   584,   587,   589,   590,   591,   594,
   595,   597,   598,   600,   603,   605,   611,   612,   614,   623,
   632,   639,   646,   649,   652,   655,   658,   665,   666,   667,
   668,   669,   672,   673,   676,   678,   681,   684,   687
};

static const char * const yytname[] = {   "$","error","$illegal.","INTEGER",
"T_INTEGER","FLOAT","T_FLOAT","STRING","T_STRING","BOOL","T_BOOL","T_POSE","IDENTIFIER",
"ARROW","DOT","PARAM_NAME","PARAM_PATH","PARAM_SIZE","PARAM_MARKS","PARAM_POS",
"PARAM_COLOR","PARAM_WIDTH","PARAM_HEIGHT","PARAM_TEXT","PARAM_ANIM_TYPE","PARAM_REFERENCE",
"PARAM_MAO","PARAM_TIME","PARAM_OFFSET","PARAM_IMPULSE","PARAM_ANG_AXIS","PARAM_PROPERTY",
"PARAM_ROT_TYPE","PARAM_LOC_TYPE","PARAM_ROTATION","PARAM_LOCATION","PARAM_TYPE",
"PARAM_VALUE","PARAM_VALUE1","PARAM_VALUE2","PARAM_ACTUATOR","PARAM_KEY","PARAM_DISTANCE",
"PARAM_PROBABILITY","PARAM_INVERSE","PARAM_GRAVITY","PARAM_AXIS","PARAM_MASS",
"PARAM_SHAPE","PARAM_SHADOWS","PARAM_SUN","MAOWORLD","MAOMARK","MAOMARKSGROUP",
"MAORENDERABLE2DIMAGE","MAORENDERABLE2DTEXT","MAORENDERABLE3DLINE","MAORENDERABLE3DMODEL",
"MAORENDERABLE3DPATH","MLBACTUATORADDDYNAMICOBJECT","MLBACTUATORANG","MLBACTUATORCHANGEPOSE",
"MLBACTUATORDISTANCE","MLBACTUATORPATHADDPOINT","MLBACTUATORPATHREMOVEPOINTS",
"MLBACTUATORPROPERTY","MLBACTUATORQUITAPP","MLBACTUATORRANDOM","MLBACTUATORRELATIVEPOSE",
"MLBACTUATORSOUND","MLBACTUATORVISIBILITY","MLBACTUATORANIM","MLBCONTROLLERAND",
"MLBCONTROLLERNAND","MLBCONTROLLERNOR","MLBCONTROLLEROR","MLBCONTROLLERSCRIPT",
"MLBSENSORACTUATOR","MLBSENSORALWAYS","MLBSENSORCOLLISION","MLBSENSORDELAY",
"MLBSENSORKEYBOARD","MLBSENSORNEAR","MLBSENSORPROPERTY","MLBSENSORRANDOM","GROUND",
"DYNAMICOBJECT","STATICOBJECT","'='","'{'","'}'","','","'('","')'","begin","maos",
"mao","mao_properties","mao_property","def_maomark","@1","param_maomark","def_maomarksgroup",
"@2","param_maomarksgroup","def_maorenderable2dimage","@3","param_maorenderable2dimage",
"def_maorenderable2dtext","@4","param_maorenderable2dtext","def_maorenderable3dmodel",
"@5","param_maorenderable3dmodel","def_maorenderable3dline","@6","param_maorenderable3dline",
"def_maorenderable3dpath","@7","param_maorenderable3dpath","ground","param_ground",
"physicobj","param_dynamicobj","mlbs","mlb","def_mlb","mlbactuator","mlbcontroller",
"mlbsensor","def_mlbactuatoradddynamic","param_mlbactuatoradddynamic","def_mlbactuatorang",
"param_mlbactuatorang","def_mlbactuatorchangepose","param_mlbactuatorchangepose",
"def_mlbactuatordistance","param_mlbactuatordistance","def_mlbactuatorpathaddpoint",
"param_mlbactuatorpathaddpoint","def_mlbactuatorpathremovepoints","param_mlbactuatorpathremovepoints",
"def_mlbactuatorproperty","param_mlbactuatorproperty","param_mlbactuatorproperty2",
"def_mlbactuatorquitapp","param_mlbactuatorquitapp","def_mlbactuatorrandom",
"param_mlbactuatorrandom","def_mlbactuatorrelativepose","param_mlbactuatorrelativepose",
"def_mlbactuatorsound","param_mlbactuatorsound","def_mlbactuatorvisibility",
"param_mlbactuatorvisibility","def_mlbactuatoranim","param_mlbactuatoranim",
"def_mlbcontrollerand","list_mlbcontrollerand","def_mlbcontrollernand","list_mlbcontrollernand",
"def_mlbcontrolleror","list_mlbcontrolleror","def_mlbcontrollernor","list_mlbcontrollernor",
"def_mlbcontrollerscript","def_mlbsensoractuator","param_mlbsensoractuator",
"def_mlbsensoralways","param_mlbsensoralways","def_mlbsensorcollision","param_mlbsensorcollision",
"def_mlbsensordelay","param_mlbsensordelay","def_mlbsensorkeyboard","param_mlbsensorkeyboard",
"def_mlbsensornear","param_mlbsensornear","def_mlbsensorproperty","param_mlbsensorproperty",
"param_mlbsensorproperty2","def_mlbsensorrandom","param_mlbsensorrandom","links",
"link","list_mlbidentifiers","integer","bool","float","string","pose","maovalue",
"maoproperty","vector2di","vector3di","vector3df","identifier","identifier"
};
#endif

static const short yyr1[] = {     0,
    94,    95,    95,    96,    96,    96,    96,    96,    96,    96,
    97,    97,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,   100,    99,   101,   101,   101,   101,   103,   102,
   104,   104,   106,   105,   107,   107,   107,   107,   107,   109,
   108,   110,   110,   110,   110,   110,   110,   112,   111,   113,
   113,   113,   113,   115,   114,   116,   116,   116,   116,   116,
   118,   117,   119,   119,   119,   119,   120,   120,   121,   121,
   121,   121,   121,   121,   122,   122,   122,   123,   123,   123,
   123,   123,   124,   124,   125,   125,   125,   126,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   128,   128,   128,   128,   128,   129,   129,   129,   129,
   129,   129,   129,   129,   130,   131,   131,   131,   131,   131,
   132,   133,   133,   133,   134,   135,   135,   135,   136,   137,
   137,   137,   138,   139,   140,   141,   142,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   150,   150,   150,   151,
   152,   153,   154,   155,   156,   156,   157,   158,   158,   158,
   159,   160,   160,   160,   161,   162,   162,   162,   163,   164,
   164,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   175,   175,   176,   177,   177,   177,   178,
   178,   179,   179,   180,   181,   182,   183,   183,   184,   184,
   185,   185,   186,   187,   188,   189,   190,   191,   191,   191,
   191,   191,   192,   192,   193,    -1,   194,   195,   196
};

static const short yyr2[] = {     0,
     1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     2,     0,     4,     2,     4,     2,     4,     2,     4,     2,
     4,     2,     0,    10,     4,     4,     4,     0,     0,    12,
     3,     1,     0,     9,     4,     4,     4,     4,     0,     0,
     9,     4,     4,     4,     4,     4,     0,     0,    10,     4,
     4,     4,     0,     0,    10,     4,     4,     4,     4,     0,
     0,    10,     4,     4,     4,     0,     4,     0,     0,     4,
     4,     4,     4,     0,     4,     6,     0,     4,     4,     4,
     4,     0,     2,     0,     2,     2,     2,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     4,     4,     4,     4,     0,
     5,     4,     4,     0,     5,     2,     6,     6,     5,     4,
     4,     0,     5,     0,     5,     0,     5,     5,     9,     9,
     5,     0,     5,     3,     5,     4,     4,     4,     0,     5,
     3,     5,     3,     5,     6,     3,     2,     3,     1,     0,
     2,     3,     1,     0,     2,     3,     1,     0,     2,     3,
     1,     0,     7,     5,     3,     5,     0,     5,     3,     5,
     3,     5,     4,     4,     0,     5,     4,     4,     0,     5,
     5,     9,    12,     9,     5,     3,     2,     0,     5,     3,
     3,     1,     1,     1,     1,     1,    16,     1,     1,     1,
     1,     1,     3,     1,     5,     5,     7,     7,     1
};

static const short yydefact[] = {     3,
     1,     0,     0,     0,     0,     0,     0,     0,     2,     4,
     5,     6,     7,     8,     9,    10,   219,     0,     0,     0,
     0,     0,     0,     0,    28,    29,    39,    47,    60,    53,
    66,     0,     0,     0,    23,     0,     0,     0,     0,     0,
    33,     0,     0,     0,     0,     0,    40,     0,     0,     0,
    54,     0,     0,     0,    48,     0,     0,     0,    61,     0,
     0,     0,    12,     0,     0,     0,     0,     0,    12,     0,
     0,     0,     0,     0,    12,     0,     0,     0,    12,     0,
     0,     0,    12,     0,     0,     0,    12,   206,    28,   205,
    28,     0,    28,    84,     0,    39,     0,    39,   203,    39,
    39,    84,    47,    47,    47,     0,    47,    47,    84,    60,
    60,    60,    84,    53,    53,    53,    84,    66,    66,    66,
    84,    25,    26,     0,    27,     0,     0,     0,     0,     0,
    11,    88,    12,    32,    35,     0,    36,    37,    38,    88,
    42,    43,    45,     0,    46,    44,    88,    56,    57,    58,
    88,    51,    50,    52,    88,    63,    64,    65,    88,     0,
    14,    16,    20,    18,    22,    83,     0,    68,    84,     0,
     0,     0,     0,     0,    77,    77,    77,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   160,   164,   172,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    85,
    86,    87,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,     0,     0,
   197,     0,   202,    88,    31,     0,    34,     0,    41,     0,
     0,     0,     0,     0,     0,    13,    15,    19,   204,    17,
    21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   157,   159,   161,   163,   169,   171,
   165,   167,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    69,    24,     0,     0,    68,   215,     0,    82,     0,
    55,    49,    62,     0,   120,   124,     0,   132,   134,   136,
     0,   142,     0,   149,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   177,     0,     0,   185,   189,     0,     0,
     0,     0,     0,     0,     0,   200,   202,   201,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   158,
   162,   170,   166,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    67,     0,    30,   217,
     0,     0,     0,     0,    75,     0,     0,     0,     0,     0,
     0,   115,     0,     0,   121,     0,     0,   125,   126,     0,
     0,   129,   133,   135,     0,   137,   138,   141,     0,   143,
     0,     0,     0,   145,     0,   150,     0,   152,     0,   154,
     0,     0,   174,   176,     0,   178,     0,   180,     0,     0,
   182,     0,     0,   186,     0,   190,   191,     0,   195,    69,
    69,    69,     0,    69,   199,    82,    82,    82,    82,     0,
     0,   120,   120,   120,   120,   124,   124,   214,     0,     0,
   132,   132,     0,   144,   149,   149,   149,   151,   153,   156,
     0,   175,   179,   181,   185,   185,   189,   189,     0,   196,
    71,    70,    72,     0,    73,    80,    81,    78,    79,    76,
     0,   116,   117,   118,   119,   123,   122,     0,     0,     0,
   130,   131,     0,   146,   147,   148,     0,   173,   183,   184,
   187,   188,     0,     0,     0,   213,     0,     0,     0,     0,
     0,     0,     0,   128,   127,     0,   155,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
   208,   209,   210,   211,   212,   139,   140,   192,   194,     0,
   207,     0,     0,   193,     0,     0,     0
};

static const short yydefgoto[] = {   585,
     1,     9,    94,   131,    10,    63,    35,    11,    36,   133,
    12,    69,    41,    13,    75,    47,    14,    83,    55,    15,
    79,    51,    16,    87,    59,   240,   335,   252,   345,   132,
   166,   167,   210,   211,   212,   213,   352,   214,   355,   215,
   429,   216,   361,   217,   362,   218,   363,   219,   365,   366,
   220,   367,   221,   369,   222,   373,   223,   375,   224,   377,
   225,   379,   226,   275,   227,   277,   228,   281,   229,   279,
   230,   231,   386,   232,   387,   233,   389,   234,   391,   235,
   394,   236,   397,   237,   399,   400,   238,   402,   168,   241,
   242,   571,   572,    92,   574,   575,   576,   487,    98,   107,
   474,   243
};

static const short yypact[] = {-32768,
   121,    15,    15,    15,    15,    15,    15,    15,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -45,   -39,   -21,
    16,    33,    50,    55,    62,-32768,   192,   126,    69,    71,
    81,    53,    65,   130,-32768,    96,   134,   136,   140,   142,
-32768,   144,   178,   181,   182,   184,-32768,   185,   186,   188,
-32768,   189,   190,   191,-32768,   193,   194,   195,-32768,    92,
   165,   165,-32768,   196,    92,   168,   277,   277,-32768,    92,
   277,   168,   197,    92,-32768,   165,   197,    15,-32768,    92,
   165,    15,-32768,   165,   197,    15,-32768,-32768,    62,-32768,
    62,   165,    62,   161,    15,   192,   277,   192,-32768,   192,
   192,   161,   126,   126,   126,   277,   126,   126,   161,    69,
    69,    69,   161,    71,    71,    71,   161,    81,    81,    81,
   161,-32768,-32768,   165,-32768,    15,    15,    15,    15,    15,
-32768,    12,-32768,   199,-32768,   200,-32768,-32768,-32768,    10,
-32768,-32768,-32768,   202,-32768,-32768,    10,-32768,-32768,-32768,
     5,-32768,-32768,-32768,     5,-32768,-32768,-32768,     5,   165,
   198,   206,   207,   209,   210,-32768,   261,    22,   161,    15,
   277,    13,   277,    14,    23,    23,    23,   165,   277,   165,
    92,   276,   165,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   211,   212,
-32768,   274,   205,    12,-32768,   213,-32768,   214,-32768,   218,
   219,   220,   221,   222,   165,-32768,-32768,-32768,-32768,-32768,
-32768,   224,   225,   226,   257,   258,   259,   260,   262,   263,
   265,   266,   267,   268,   270,-32768,   273,-32768,   275,-32768,
   278,-32768,   269,   279,   284,   288,   289,   290,   291,   292,
   293,    20,-32768,    15,    15,    22,-32768,   277,    25,   240,
-32768,-32768,-32768,   165,   208,    52,   148,    89,-32768,-32768,
   314,-32768,   272,    11,   283,   264,   331,    15,    15,    15,
    15,   367,   345,-32768,   355,   282,    82,    43,   351,   346,
   300,   302,   303,   304,   305,-32768,    17,-32768,   306,   308,
   311,   315,   316,   317,   312,   318,   165,   319,   322,   323,
   324,   325,   329,   330,   333,   336,   338,    26,   339,   343,
   342,   344,   352,   347,   353,   354,   356,   348,   357,   360,
   361,   363,   362,   366,   365,   368,   369,   370,   371,-32768,
-32768,-32768,-32768,   374,   375,   376,   377,   380,   379,   382,
   381,   384,   385,   386,   387,   389,   390,   391,   392,   393,
   396,   395,   165,    92,   276,   301,-32768,    15,-32768,-32768,
   165,   301,   165,    92,-32768,    92,   165,    15,   277,   165,
   301,-32768,    92,    15,-32768,    92,    92,-32768,   148,    15,
    15,-32768,-32768,-32768,    92,-32768,-32768,-32768,    15,-32768,
    15,    15,   276,-32768,    92,-32768,   276,-32768,    92,-32768,
    92,    15,-32768,-32768,    15,-32768,   277,-32768,    92,    92,
-32768,    15,   165,-32768,    92,-32768,-32768,   165,-32768,    20,
    20,    20,   165,    20,-32768,    25,    25,    25,    25,   397,
   165,   208,   208,   208,   208,    52,    52,   399,   407,   398,
    89,    89,   388,-32768,    11,    11,    11,-32768,-32768,   421,
   400,-32768,-32768,-32768,    82,    82,    43,    43,   426,-32768,
-32768,-32768,-32768,   373,-32768,-32768,-32768,-32768,-32768,-32768,
   165,-32768,-32768,-32768,-32768,-32768,-32768,    15,   401,   403,
-32768,-32768,   404,-32768,-32768,-32768,   405,-32768,-32768,-32768,
-32768,-32768,   406,   165,   165,-32768,   301,   301,    15,    92,
    15,   383,   165,-32768,-32768,   428,-32768,   172,   165,   165,
   408,   409,   410,   328,   165,   154,   154,   155,-32768,   165,
-32768,-32768,   165,-32768,-32768,-32768,-32768,-32768,-32768,   442,
-32768,   412,   155,-32768,   486,   488,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   -12,-32768,-32768,-32768,   138,-32768,-32768,   334,
-32768,-32768,   125,-32768,-32768,   112,-32768,-32768,   133,-32768,
-32768,    21,-32768,-32768,   132,   215,  -320,    80,  -237,   -57,
-32768,-32768,-32768,-32768,-32768,-32768,  -239,-32768,  -228,-32768,
   201,-32768,  -229,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -242,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -241,-32768,  -240,-32768,-32768,-32768,-32768,-32768,  -108,-32768,
  -279,   -60,  -172,   -43,   -51,   -49,  -506,  -411,   423,   -37,
  -400,    -2
};


#define	YYLAST		565


static const short yytable[] = {    18,
    19,    20,    21,    22,    23,    24,   100,   101,    89,   260,
   104,   477,    93,    96,   336,   338,  -198,    91,   103,   492,
   485,  -198,   108,  -198,    17,    17,    17,   494,   114,   408,
   496,   172,   110,    17,    17,   370,   136,   115,   174,   111,
   118,   371,   175,    25,   140,   144,   176,   119,   124,    26,
   177,   147,   341,   342,   372,   151,   102,   356,   357,   155,
   578,   580,   109,   159,   331,   332,   113,    27,   333,   334,
   117,   343,   344,   395,   121,   112,   584,    32,    33,   116,
   160,   353,   354,   120,   396,    48,    52,    53,    49,    34,
  -198,  -198,   134,    50,  -198,    54,  -198,    56,    88,  -198,
    57,  -198,   247,   249,    28,    58,   239,   295,   250,   251,
   246,   244,   248,    64,   359,   428,   178,   392,   256,   360,
   169,    29,   393,   161,   162,   163,   164,   165,   475,   258,
   148,   149,   150,   261,   255,   296,   257,   556,    30,   558,
    60,    42,    43,    31,    44,    45,   554,   555,    46,   511,
   512,   513,    61,   515,   577,   579,    99,    99,    90,    90,
    88,    88,   259,   259,   126,    17,   127,   134,   128,    90,
   129,   130,     2,     3,     4,     5,     6,     7,     8,   356,
   357,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   276,   278,   280,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,    37,   562,   563,
    38,   304,    39,    40,   141,   142,   143,    62,   145,   146,
   135,    65,   137,    66,   138,   139,   122,    67,   123,    68,
   125,    70,   472,   348,   349,   350,   351,   340,   516,   517,
   518,   519,   522,   523,   524,   525,   152,   153,   154,   156,
   157,   158,   534,   535,   536,   253,   254,   526,   527,    97,
   347,   531,   532,   539,   540,    71,   541,   542,    72,    73,
   497,    74,    76,    77,   499,    78,    80,    81,    82,    99,
    84,    85,    86,    95,   259,   179,   294,   346,   106,   170,
   171,   337,   173,   180,   181,   295,   182,   183,   374,   292,
   376,   293,   368,   417,   298,   297,   299,   300,   390,   301,
   302,   303,   305,   306,   307,   380,   381,   382,   383,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   308,   309,   310,   311,   364,
   312,   313,   471,   314,   315,   316,   317,   322,   483,   470,
   318,   476,   479,   319,   480,   320,   378,   323,   321,   478,
   484,   486,   324,   481,   489,   490,   325,   326,   327,   328,
   329,   330,   384,   493,   385,   388,   398,   403,   401,   404,
   405,   406,   473,   498,   407,   409,   504,   500,   411,   501,
   410,   415,   412,   413,   414,   416,   418,   505,   506,   419,
   420,   421,   528,   509,   422,   482,   423,   424,   533,   508,
   569,   488,   425,   426,   510,   427,   430,   491,   488,   514,
   431,   432,   530,   433,   435,   439,   488,   521,   495,   488,
   529,   434,   436,   437,   537,   438,   440,   441,   442,   502,
   443,   444,   503,   445,   446,   447,   543,   449,   448,   507,
   450,   451,   452,   544,   561,   453,   454,   455,   456,   457,
   458,   459,   460,   559,   462,   461,   463,   545,   465,   464,
   582,   466,   467,   468,   469,   586,   520,   587,   547,   538,
   548,   549,   550,   551,   105,   566,   567,   568,   557,   583,
   552,   553,     0,   245,     0,     0,     0,   358,     0,   560,
   339,     0,     0,     0,     0,   564,   565,     0,     0,     0,
     0,   570,   573,   573,   573,   546,   581,     0,     0,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   573,
     0,     0,     0,     0,     0,     0,   488,     0,   488,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   488,   488
};

static const short yycheck[] = {     2,
     3,     4,     5,     6,     7,     8,    67,    68,    60,   182,
    71,   412,    62,    65,   294,   295,    12,    61,    70,   431,
   421,    12,    74,    12,    12,    12,    12,   439,    80,    13,
   442,   140,    76,    12,    12,    25,    97,    81,   147,    77,
    84,    31,   151,    89,   102,   106,   155,    85,    92,    89,
   159,   109,    28,    29,    44,   113,    69,    32,    33,   117,
   567,   568,    75,   121,    45,    46,    79,    89,    49,    50,
    83,    47,    48,    31,    87,    78,   583,    16,    17,    82,
   124,    30,    31,    86,    42,    17,    16,    17,    20,    28,
    86,    87,    95,    25,    90,    25,    85,    17,     7,    90,
    20,    90,    90,    90,    89,    25,    85,    91,    86,    87,
   171,   169,   173,    18,    26,    90,   160,    36,   179,    31,
   133,    89,    41,   126,   127,   128,   129,   130,   408,   181,
   110,   111,   112,   183,   178,   244,   180,   549,    89,   551,
    88,    16,    17,    89,    19,    20,   547,   548,    23,   470,
   471,   472,    88,   474,   566,   567,     3,     3,     5,     5,
     7,     7,     9,     9,     4,    12,     6,   170,     8,     5,
    10,    11,    52,    53,    54,    55,    56,    57,    58,    32,
    33,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
   203,   204,   205,   206,   207,   208,   209,    16,    37,    38,
    19,   255,    21,    22,   103,   104,   105,    88,   107,   108,
    96,    88,    98,    88,   100,   101,    89,    88,    91,    88,
    93,    88,   405,    26,    27,    28,    29,   298,   476,   477,
   478,   479,   482,   483,   484,   485,   114,   115,   116,   118,
   119,   120,   495,   496,   497,   176,   177,   486,   487,    92,
   304,   491,   492,   505,   506,    88,   507,   508,    88,    88,
   443,    88,    88,    88,   447,    88,    88,    88,    88,     3,
    88,    88,    88,    88,     9,    88,    13,    48,    92,    91,
    91,   294,    91,    88,    88,    91,    88,    88,    16,    89,
    37,    90,    31,   347,    91,    93,    89,    89,    27,    90,
    90,    90,    89,    89,    89,   318,   319,   320,   321,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    89,    89,    89,    89,    36,
    89,    89,   404,    89,    89,    89,    89,    89,   419,   403,
    91,   411,   414,    91,   416,    91,    36,    89,    91,   413,
   420,   423,    89,   417,   426,   427,    89,    89,    89,    89,
    89,    89,    16,   435,    40,    31,    36,    88,    43,    88,
    88,    88,    92,   445,    90,    90,   457,   449,    88,   451,
    93,    90,    88,    88,    88,    88,    88,   459,   460,    88,
    88,    88,    14,   465,    90,   418,    88,    88,    31,   463,
    93,   424,    90,    88,   468,    88,    88,   430,   431,   473,
    88,    90,    35,    90,    88,    88,   439,   481,   441,   442,
    34,    90,    90,    90,    24,    90,    90,    88,    88,   452,
    88,    90,   455,    88,    90,    88,    31,    88,    90,   462,
    90,    88,    88,    91,    37,    90,    90,    88,    90,    88,
    90,    88,    88,    91,    88,    90,    88,   521,    88,    90,
    39,    90,    90,    88,    90,     0,    90,     0,    88,    90,
    88,    88,    88,    88,    72,    88,    88,    88,   550,    88,
   544,   545,    -1,   170,    -1,    -1,    -1,   307,    -1,   553,
   296,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
    -1,   565,   566,   567,   568,   528,   570,    -1,    -1,   573,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   583,
    -1,    -1,    -1,    -1,    -1,    -1,   549,    -1,   551,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   566,   567
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_MSLParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_MSLParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_MSLParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_MSLParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_MSLParser_CHAR = (token), YY_MSLParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_MSLParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_MSLParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_MSLParser_PURE
/* UNPURE */
#define YYLEX           YY_MSLParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_MSLParser_CHAR;                      /*  the lookahead symbol        */
YY_MSLParser_STYPE      YY_MSLParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_MSLParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_MSLParser_LSP_NEEDED
YY_MSLParser_LTYPE YY_MSLParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_MSLParser_LSP_NEEDED
#define YYLEX           YY_MSLParser_LEX(&YY_MSLParser_LVAL, &YY_MSLParser_LLOC)
#else
#define YYLEX           YY_MSLParser_LEX(&YY_MSLParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_MSLParser_DEBUG != 0
int YY_MSLParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_MSLParser_CLASS::
#endif
     YY_MSLParser_PARSE(YY_MSLParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_MSLParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_MSLParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_MSLParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_MSLParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_MSLParser_LSP_NEEDED
  YY_MSLParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_MSLParser_LTYPE *yyls = yylsa;
  YY_MSLParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_MSLParser_PURE
  int YY_MSLParser_CHAR;
  YY_MSLParser_STYPE YY_MSLParser_LVAL;
  int YY_MSLParser_NERRS;
#ifdef YY_MSLParser_LSP_NEEDED
  YY_MSLParser_LTYPE YY_MSLParser_LLOC;
#endif
#endif

  YY_MSLParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_MSLParser_NERRS = 0;
  YY_MSLParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_MSLParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_MSLParser_LSP_NEEDED
      YY_MSLParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_MSLParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_MSLParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_MSLParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_MSLParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_MSLParser_LSP_NEEDED
      yyls = (YY_MSLParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_MSLParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_MSLParser_CHAR == YYEMPTY)
    {
#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_MSLParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_MSLParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_MSLParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_MSLParser_CHAR);

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_MSLParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_MSLParser_CHAR, YY_MSLParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_MSLParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_MSLParser_CHAR != YYEOF)
    YY_MSLParser_CHAR = YYEMPTY;

  *++yyvsp = YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
  *++yylsp = YY_MSLParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 269 "Kernel/MSLParser.y"
{Logger::getInstance()->out("Parsing completed succesfully! Enjoy your app!");;
    break;}
case 2:
#line 272 "Kernel/MSLParser.y"
{;
    break;}
case 3:
#line 273 "Kernel/MSLParser.y"
{;
    break;}
case 4:
#line 276 "Kernel/MSLParser.y"
{;
    break;}
case 5:
#line 277 "Kernel/MSLParser.y"
{;
    break;}
case 6:
#line 278 "Kernel/MSLParser.y"
{;
    break;}
case 7:
#line 279 "Kernel/MSLParser.y"
{;
    break;}
case 8:
#line 280 "Kernel/MSLParser.y"
{;
    break;}
case 9:
#line 281 "Kernel/MSLParser.y"
{;
    break;}
case 10:
#line 282 "Kernel/MSLParser.y"
{;
    break;}
case 11:
#line 285 "Kernel/MSLParser.y"
{;
    break;}
case 12:
#line 286 "Kernel/MSLParser.y"
{;
    break;}
case 13:
#line 289 "Kernel/MSLParser.y"
{currentMAO->addPropertyInt(*yyvsp[-2]. string_type ,yyvsp[0]. int_type );;
    break;}
case 14:
#line 290 "Kernel/MSLParser.y"
{currentMAO->addPropertyInt(*yyvsp[0]. string_type );;
    break;}
case 15:
#line 291 "Kernel/MSLParser.y"
{currentMAO->addPropertyFloat(*yyvsp[-2]. string_type ,yyvsp[0]. float_type );;
    break;}
case 16:
#line 292 "Kernel/MSLParser.y"
{currentMAO->addPropertyFloat(*yyvsp[0]. string_type );;
    break;}
case 17:
#line 293 "Kernel/MSLParser.y"
{currentMAO->addPropertyBoolean(*yyvsp[-2]. string_type ,yyvsp[0]. bool_type );;
    break;}
case 18:
#line 294 "Kernel/MSLParser.y"
{currentMAO->addPropertyBoolean(*yyvsp[0]. string_type );;
    break;}
case 19:
#line 295 "Kernel/MSLParser.y"
{currentMAO->addPropertyString(*yyvsp[-2]. string_type ,*yyvsp[0]. string_type );;
    break;}
case 20:
#line 296 "Kernel/MSLParser.y"
{currentMAO->addPropertyString(*yyvsp[0]. string_type );;
    break;}
case 21:
#line 297 "Kernel/MSLParser.y"
{currentMAO->addPropertyPose(*yyvsp[-2]. string_type ,*yyvsp[0]. pose_type );;
    break;}
case 22:
#line 298 "Kernel/MSLParser.y"
{currentMAO->addPropertyPose(*yyvsp[0]. string_type );;
    break;}
case 23:
#line 303 "Kernel/MSLParser.y"
{ currentMAO = &MAOFactory::getInstance()->addMAOMark(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->float1); ((MAOMark*)currentMAO)->setOffsetMatrix(yyvsp[0]. param_type ->pose1);;
    break;}
case 24:
#line 303 "Kernel/MSLParser.y"
{;
    break;}
case 25:
#line 305 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ; ;
    break;}
case 26:
#line 306 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;  ;
    break;}
case 27:
#line 307 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->pose1 = yyvsp[-1]. pose_type ; ;
    break;}
case 28:
#line 308 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 29:
#line 312 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAOMarksGroup(*yyvsp[-1]. string_type );;
    break;}
case 30:
#line 312 "Kernel/MSLParser.y"
{;
    break;}
case 31:
#line 315 "Kernel/MSLParser.y"
{MAOMark& mark = (MAOMark&)MAOFactory::getInstance()->getMAOPositionator3D(*yyvsp[-2]. string_type );((MAOMarksGroup*)currentMAO)->addMarktoGroup(mark);;
    break;}
case 32:
#line 316 "Kernel/MSLParser.y"
{MAOMark& mark = (MAOMark&)MAOFactory::getInstance()->getMAOPositionator3D(*yyvsp[0]. string_type );((MAOMarksGroup*)currentMAO)->addMarktoGroup(mark);;
    break;}
case 33:
#line 320 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable2DImage(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y(),yyvsp[0]. param_type ->int3,yyvsp[0]. param_type ->int4);;;
    break;}
case 34:
#line 320 "Kernel/MSLParser.y"
{;
    break;}
case 35:
#line 322 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 36:
#line 323 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 37:
#line 324 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->int3 = yyvsp[-1]. int_type ;;
    break;}
case 38:
#line 325 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->int4 = yyvsp[-1]. int_type ;;
    break;}
case 39:
#line 326 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 40:
#line 329 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable2DText(*yyvsp[-2]. string_type ,*yyvsp[0]. param_type ->string1,yyvsp[0]. param_type ->int1,*yyvsp[0]. param_type ->string2,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y()); ((MAORenderable2DText*)currentMAO)->setColor(yyvsp[0]. param_type ->btvector2->x(),yyvsp[0]. param_type ->btvector2->y(),yyvsp[0]. param_type ->btvector2->z()); ;;
    break;}
case 41:
#line 329 "Kernel/MSLParser.y"
{;
    break;}
case 42:
#line 331 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 43:
#line 332 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->int1 = yyvsp[-1]. int_type ;;
    break;}
case 44:
#line 333 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string2 = yyvsp[-1]. string_type ;;
    break;}
case 45:
#line 334 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 46:
#line 335 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector2 = yyvsp[-1]. vector3_type ;;
    break;}
case 47:
#line 336 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 48:
#line 339 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DModel(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,*yyvsp[0]. param_type ->string1,*yyvsp[0]. param_type ->string2); ;;
    break;}
case 49:
#line 339 "Kernel/MSLParser.y"
{;
    break;}
case 50:
#line 341 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 51:
#line 342 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 52:
#line 343 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string2 = yyvsp[-1]. string_type ;;
    break;}
case 53:
#line 344 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 54:
#line 347 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DLine(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,yyvsp[0]. param_type ->btvector1->x(), yyvsp[0]. param_type ->btvector1->y(), yyvsp[0]. param_type ->btvector1->z(),*yyvsp[0]. param_type ->string1,*yyvsp[0]. param_type ->string2); ;;
    break;}
case 55:
#line 347 "Kernel/MSLParser.y"
{;
    break;}
case 56:
#line 349 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 57:
#line 350 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 58:
#line 351 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 59:
#line 352 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string2 = yyvsp[-1]. string_type ;;
    break;}
case 60:
#line 353 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 61:
#line 356 "Kernel/MSLParser.y"
{currentMAO = &MAOFactory::getInstance()->addMAORenderable3DPath(*yyvsp[-2]. string_type ,yyvsp[0]. param_type ->float1,yyvsp[0]. param_type ->btvector1->x(),yyvsp[0]. param_type ->btvector1->y(),yyvsp[0]. param_type ->btvector1->z(), *yyvsp[0]. param_type ->string1); ;;
    break;}
case 62:
#line 356 "Kernel/MSLParser.y"
{;
    break;}
case 63:
#line 358 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 64:
#line 359 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 65:
#line 360 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 66:
#line 361 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 67:
#line 365 "Kernel/MSLParser.y"
{ PhysicsController::getInstance()->initPhysics(); PhysicsController::getInstance()->setMAOGround(*((MAOPositionator3D*)currentMAO),*yyvsp[-1]. param_type ->string1,yyvsp[-1]. param_type ->float1, yyvsp[-1]. param_type ->bool1, yyvsp[-1]. param_type ->btvector1); ;
    break;}
case 68:
#line 366 "Kernel/MSLParser.y"
{;
    break;}
case 70:
#line 369 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 71:
#line 370 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 72:
#line 371 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->bool1 = yyvsp[-1]. bool_type ;;
    break;}
case 73:
#line 372 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 74:
#line 373 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 75:
#line 377 "Kernel/MSLParser.y"
{PhysicsController::getInstance()->addDynamicRigidBody(*((MAORenderable3D*)currentMAO),yyvsp[-1]. param_type ->float1,yyvsp[-1]. param_type ->pose1,yyvsp[-1]. param_type ->btvector1,*yyvsp[-1]. param_type ->string1);  ((MAORenderable3D*)currentMAO)->setCollisionShapeType(*yyvsp[-1]. param_type ->string1);;;
    break;}
case 76:
#line 378 "Kernel/MSLParser.y"
{PhysicsController::getInstance()->addStaticRigidBody(*((MAORenderable3D*)currentMAO),*yyvsp[-1]. string_type ); ((MAORenderable3D*)currentMAO)->setCollisionShapeType(*yyvsp[-1]. string_type );;;
    break;}
case 77:
#line 379 "Kernel/MSLParser.y"
{;
    break;}
case 78:
#line 382 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 79:
#line 383 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 80:
#line 384 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->pose1 = yyvsp[-1]. pose_type ;;
    break;}
case 81:
#line 385 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 82:
#line 386 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 83:
#line 391 "Kernel/MSLParser.y"
{;
    break;}
case 84:
#line 392 "Kernel/MSLParser.y"
{;
    break;}
case 85:
#line 395 "Kernel/MSLParser.y"
{;
    break;}
case 86:
#line 396 "Kernel/MSLParser.y"
{;
    break;}
case 87:
#line 397 "Kernel/MSLParser.y"
{;
    break;}
case 88:
#line 400 "Kernel/MSLParser.y"
{;
    break;}
case 89:
#line 403 "Kernel/MSLParser.y"
{;
    break;}
case 90:
#line 404 "Kernel/MSLParser.y"
{;
    break;}
case 91:
#line 405 "Kernel/MSLParser.y"
{;
    break;}
case 92:
#line 406 "Kernel/MSLParser.y"
{;
    break;}
case 93:
#line 407 "Kernel/MSLParser.y"
{;
    break;}
case 94:
#line 408 "Kernel/MSLParser.y"
{;
    break;}
case 95:
#line 409 "Kernel/MSLParser.y"
{;
    break;}
case 96:
#line 410 "Kernel/MSLParser.y"
{;
    break;}
case 97:
#line 411 "Kernel/MSLParser.y"
{;
    break;}
case 98:
#line 412 "Kernel/MSLParser.y"
{;
    break;}
case 99:
#line 413 "Kernel/MSLParser.y"
{;
    break;}
case 100:
#line 414 "Kernel/MSLParser.y"
{;
    break;}
case 101:
#line 415 "Kernel/MSLParser.y"
{;
    break;}
case 102:
#line 418 "Kernel/MSLParser.y"
{;
    break;}
case 103:
#line 419 "Kernel/MSLParser.y"
{;
    break;}
case 104:
#line 420 "Kernel/MSLParser.y"
{;
    break;}
case 105:
#line 421 "Kernel/MSLParser.y"
{;
    break;}
case 106:
#line 422 "Kernel/MSLParser.y"
{;
    break;}
case 107:
#line 425 "Kernel/MSLParser.y"
{;
    break;}
case 108:
#line 426 "Kernel/MSLParser.y"
{;
    break;}
case 109:
#line 427 "Kernel/MSLParser.y"
{;
    break;}
case 110:
#line 428 "Kernel/MSLParser.y"
{;
    break;}
case 111:
#line 429 "Kernel/MSLParser.y"
{;
    break;}
case 112:
#line 430 "Kernel/MSLParser.y"
{;
    break;}
case 113:
#line 431 "Kernel/MSLParser.y"
{;
    break;}
case 114:
#line 432 "Kernel/MSLParser.y"
{;
    break;}
case 115:
#line 442 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorAddDynamicObject(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1,yyvsp[-1]. param_type ->int1,yyvsp[-1]. param_type ->pose1,yyvsp[-1]. param_type ->btvector1); ;;
    break;}
case 116:
#line 444 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 117:
#line 445 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->int1 = yyvsp[-1]. int_type ;;
    break;}
case 118:
#line 446 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->pose1 = yyvsp[-1]. pose_type ;;
    break;}
case 119:
#line 447 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->btvector1 = yyvsp[-1]. vector3_type ;;
    break;}
case 120:
#line 448 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 121:
#line 451 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorAng(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->string2); ;;
    break;}
case 122:
#line 453 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->maoproperty1 = yyvsp[-1]. maoproperty_type ;;
    break;}
case 123:
#line 454 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string2 = yyvsp[-1]. string_type ;;
    break;}
case 124:
#line 455 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 125:
#line 458 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorChangePose(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, yyvsp[-1]. param_type ->btvector1, *yyvsp[-1]. param_type ->string2, yyvsp[-1]. param_type ->btvector2); ;;
    break;}
case 126:
#line 460 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[-1]. param_type ); yyval. param_type ->fill(*yyvsp[0]. param_type ); ; ;;
    break;}
case 127:
#line 461 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type ->btvector1 = yyvsp[0]. vector3_type ;;
    break;}
case 128:
#line 462 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string2 = yyvsp[-3]. string_type ; yyval. param_type ->btvector2 = yyvsp[0]. vector3_type ;;
    break;}
case 129:
#line 465 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorDistance(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1); ;;
    break;}
case 130:
#line 467 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 131:
#line 468 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->maoproperty1 = yyvsp[-1]. maoproperty_type ;;
    break;}
case 132:
#line 469 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 133:
#line 472 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorPathAddPoint(*yyvsp[-3]. string_type ,currentMAO->getName()); ;;
    break;}
case 134:
#line 475 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 135:
#line 478 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorPathRemovePoints(*yyvsp[-3]. string_type ,currentMAO->getName()); ;;
    break;}
case 136:
#line 480 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 137:
#line 483 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorProperty(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->maovalue1,*yyvsp[-1]. param_type ->string1); ;;
    break;}
case 138:
#line 484 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorProperty(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1, *yyvsp[-1]. param_type ->maoproperty2,*yyvsp[-1]. param_type ->string1); ;;
    break;}
case 139:
#line 486 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  ->string1 = yyvsp[-6]. string_type ; yyval. param_type  ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type  -> maovalue1 = yyvsp[0]. maovalue_type ;;
    break;}
case 140:
#line 488 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  ->string1 = yyvsp[-6]. string_type ; yyval. param_type  ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type  -> maoproperty2 = yyvsp[0]. maoproperty_type ;;
    break;}
case 141:
#line 491 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorQuitApp(*yyvsp[-3]. string_type ,currentMAO->getName()); ;;
    break;}
case 142:
#line 493 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties();;
    break;}
case 143:
#line 496 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorRandom(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->maoproperty1); ;;
    break;}
case 144:
#line 498 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> maoproperty1 = yyvsp[0]. maoproperty_type ;;
    break;}
case 145:
#line 501 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorRelativePose(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->bool1); ;;
    break;}
case 146:
#line 503 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 147:
#line 504 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->maoproperty1 = yyvsp[-1]. maoproperty_type ;;
    break;}
case 148:
#line 505 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->bool1 = yyvsp[-1]. bool_type ;;
    break;}
case 149:
#line 506 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 150:
#line 509 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorSound(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1); ;;
    break;}
case 151:
#line 511 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[0]. string_type ; ;
    break;}
case 152:
#line 514 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBActuatorVisibility(*yyvsp[-3]. string_type , currentMAO->getName(), yyvsp[-1]. param_type ->bool1); ;;
    break;}
case 153:
#line 516 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> bool1 = yyvsp[0]. bool_type ;;
    break;}
case 154:
#line 519 "Kernel/MSLParser.y"
{ MLBFactory::getInstance()->addMLBActuatorAnim(*yyvsp[-3]. string_type , currentMAO->getName(), *yyvsp[-1]. param_type ->string1, yyvsp[-1]. param_type ->string2); ;;
    break;}
case 155:
#line 521 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-3]. string_type ; yyval. param_type  -> string2 = yyvsp[0]. string_type ;;
    break;}
case 156:
#line 522 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[0]. string_type ;;
    break;}
case 157:
#line 526 "Kernel/MSLParser.y"
{;
    break;}
case 158:
#line 528 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 159:
#line 529 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 160:
#line 530 "Kernel/MSLParser.y"
{;
    break;}
case 161:
#line 533 "Kernel/MSLParser.y"
{;
    break;}
case 162:
#line 535 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 163:
#line 536 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNAND(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 164:
#line 537 "Kernel/MSLParser.y"
{;
    break;}
case 165:
#line 540 "Kernel/MSLParser.y"
{;
    break;}
case 166:
#line 542 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 167:
#line 543 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 168:
#line 544 "Kernel/MSLParser.y"
{;
    break;}
case 169:
#line 547 "Kernel/MSLParser.y"
{;
    break;}
case 170:
#line 549 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 171:
#line 550 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerNOR(*yyvsp[0]. string_type , currentMAO->getName());;
    break;}
case 172:
#line 551 "Kernel/MSLParser.y"
{;
    break;}
case 173:
#line 554 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBControllerScript(*yyvsp[-5]. string_type ,currentMAO->getName(),*yyvsp[-1]. string_type ); ;;
    break;}
case 174:
#line 560 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorActuator(*yyvsp[-3]. string_type , currentMAO->getName(), *yyvsp[-1]. param_type ->string1); ;;
    break;}
case 175:
#line 562 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> string1 = yyvsp[0]. string_type ;;
    break;}
case 176:
#line 565 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorAlways(*yyvsp[-3]. string_type , currentMAO->getName()); ;;
    break;}
case 177:
#line 567 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 178:
#line 570 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorCollision(*yyvsp[-3]. string_type ,currentMAO->getName(),*yyvsp[-1]. param_type ->string1); ;;
    break;}
case 179:
#line 572 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type  -> string1 = yyvsp[0]. string_type ;;
    break;}
case 180:
#line 575 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorDelay(*yyvsp[-3]. string_type , currentMAO->getName(),yyvsp[-1]. param_type ->int1); ;;
    break;}
case 181:
#line 577 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type  -> int1 = yyvsp[0]. int_type ;;
    break;}
case 182:
#line 580 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorKeyboard(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->string2); ;;
    break;}
case 183:
#line 582 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 184:
#line 583 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string2 = yyvsp[-1]. string_type ;;
    break;}
case 185:
#line 584 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 186:
#line 587 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorNear(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1,yyvsp[-1]. param_type ->float1); ;;
    break;}
case 187:
#line 589 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->string1 = yyvsp[-1]. string_type ;;
    break;}
case 188:
#line 590 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(*yyvsp[0]. param_type ); yyval. param_type ->float1 = yyvsp[-1]. float_type ;;
    break;}
case 189:
#line 591 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties();;
    break;}
case 190:
#line 594 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorProperty(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->maovalue1, yyvsp[-1]. param_type ->maovalue2); ;;
    break;}
case 191:
#line 595 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorProperty(*yyvsp[-3]. string_type , currentMAO->getName(),*yyvsp[-1]. param_type ->string1, *yyvsp[-1]. param_type ->maoproperty1, yyvsp[-1]. param_type ->maoproperty2); ;;
    break;}
case 192:
#line 597 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-6]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->maovalue1 = yyvsp[0]. maovalue_type ;;
    break;}
case 193:
#line 598 "Kernel/MSLParser.y"
{ yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-9]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-6]. maoproperty_type ; yyval. param_type ->maovalue1 = yyvsp[-3]. maovalue_type ; yyval. param_type ->maovalue2 = yyvsp[0]. maovalue_type ;;
    break;}
case 194:
#line 600 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->string1 = yyvsp[-6]. string_type ; yyval. param_type ->maoproperty1 = yyvsp[-3]. maoproperty_type ; yyval. param_type ->maoproperty2 = yyvsp[0]. maoproperty_type ;;
    break;}
case 195:
#line 603 "Kernel/MSLParser.y"
{MLBFactory::getInstance()->addMLBSensorRandom(*yyvsp[-3]. string_type ,currentMAO->getName(),yyvsp[-1]. param_type ->float1); ;;
    break;}
case 196:
#line 605 "Kernel/MSLParser.y"
{yyval. param_type  = new MSLProperties(); yyval. param_type ->float1 = yyvsp[0]. float_type ;;
    break;}
case 197:
#line 611 "Kernel/MSLParser.y"
{;
    break;}
case 198:
#line 612 "Kernel/MSLParser.y"
{;
    break;}
case 199:
#line 614 "Kernel/MSLParser.y"
{
				for(unsigned int i=0;i<yyvsp[-4]. vectorstr_type->size();i++){
					MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*(yyvsp[-4]. vectorstr_type->at(i)),*yyvsp[-2]. string_type );
				}

				for(unsigned int i=0;i<yyvsp[0]. vectorstr_type->size();i++){
					MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*yyvsp[-2]. string_type ,*(yyvsp[0]. vectorstr_type->at(i)));
				}
				; ;;
    break;}
case 200:
#line 623 "Kernel/MSLParser.y"
{
				for(unsigned int i=0;i<yyvsp[-2]. vectorstr_type->size();i++){
					for(unsigned int j=0;j<yyvsp[0]. vectorstr_type->size();j++){
						MLBFactory::getInstance()->addMLBLink(currentMAO->getName(),*(yyvsp[-2]. vectorstr_type->at(i)),*(yyvsp[0]. vectorstr_type->at(j)));
					}
				}
				; ;
    break;}
case 201:
#line 632 "Kernel/MSLParser.y"
{
					yyval. vectorstr_type = new std::vector<std::string*>(); yyval. vectorstr_type->push_back(yyvsp[-2]. string_type );
					for(unsigned int i=0;i<yyvsp[0]. vectorstr_type->size();i++){
						yyval. vectorstr_type->push_back(yyvsp[0]. vectorstr_type->at(i));
					}
					;
					;
    break;}
case 202:
#line 639 "Kernel/MSLParser.y"
{yyval. vectorstr_type = new std::vector<std::string*>(); yyval. vectorstr_type->push_back(yyvsp[0]. string_type );;
    break;}
case 203:
#line 646 "Kernel/MSLParser.y"
{ yyval. int_type  = atoi(lexer.YYText());;
    break;}
case 204:
#line 649 "Kernel/MSLParser.y"
{if(strcmp(lexer.YYText(),"False")==0) yyval. bool_type  = false; else yyval. bool_type  = true;;
    break;}
case 205:
#line 652 "Kernel/MSLParser.y"
{yyval. float_type  = atof(lexer.YYText());;
    break;}
case 206:
#line 655 "Kernel/MSLParser.y"
{int l = strlen(lexer.YYText()); yyval. string_type  = new std::string(lexer.YYText()+1,l-2);;
    break;}
case 207:
#line 658 "Kernel/MSLParser.y"
{float* f = new float[16];f[0]=yyvsp[-15]. float_type ; f[1]=yyvsp[-14]. float_type ;f[2]=yyvsp[-13]. float_type ;f[3]=yyvsp[-12]. float_type ;
f[4]=yyvsp[-11]. float_type ; f[5]=yyvsp[-10]. float_type ;f[6]=yyvsp[-9]. float_type ;f[7]=yyvsp[-8]. float_type ;
f[8]=yyvsp[-7]. float_type ; f[9]=yyvsp[-6]. float_type ;f[10]=yyvsp[-5]. float_type ;f[11]=yyvsp[-4]. float_type ;
f[12]=yyvsp[-3]. float_type ; f[13]=yyvsp[-2]. float_type ;f[14]=yyvsp[-1]. float_type ;f[15]=yyvsp[0]. float_type ;
cv::Mat* m = new cv::Mat(4,4,CV_32F,(void*) f); yyval. pose_type  = m;;
    break;}
case 208:
#line 665 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_INT, yyvsp[0]. int_type );;
    break;}
case 209:
#line 666 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_BOOLEAN, yyvsp[0]. bool_type );
    break;}
case 210:
#line 667 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_FLOAT, yyvsp[0]. float_type );
    break;}
case 211:
#line 668 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_STRING, yyvsp[0]. string_type );
    break;}
case 212:
#line 669 "Kernel/MSLParser.y"
{yyval. maovalue_type  = new MAOValue(MAOPROPERTY_POSE, yyvsp[0]. pose_type );
    break;}
case 213:
#line 672 "Kernel/MSLParser.y"
{ yyval. maoproperty_type  = &MAOFactory::getInstance()->findProperty(*yyvsp[-2]. string_type ,*yyvsp[0]. string_type ); ;
    break;}
case 214:
#line 673 "Kernel/MSLParser.y"
{yyval. maoproperty_type  = &MAOFactory::getInstance()->findProperty(currentMAO->getName(),*yyvsp[0]. string_type );;
    break;}
case 215:
#line 676 "Kernel/MSLParser.y"
{ yyval. vector3_type  = new btVector3(yyvsp[-3]. int_type ,yyvsp[-1]. int_type ,-1);;
    break;}
case 216:
#line 678 "Kernel/MSLParser.y"
{ yyval. vector3_type  = new btVector3(yyvsp[-3]. float_type ,yyvsp[-1]. float_type ,-1);;
    break;}
case 217:
#line 681 "Kernel/MSLParser.y"
{yyval. vector3_type  = new btVector3(yyvsp[-5]. int_type ,yyvsp[-3]. int_type ,yyvsp[-1]. int_type );;
    break;}
case 218:
#line 684 "Kernel/MSLParser.y"
{yyval. vector3_type  = new btVector3(yyvsp[-5]. float_type ,yyvsp[-3]. float_type ,yyvsp[-1]. float_type );;
    break;}
case 219:
#line 687 "Kernel/MSLParser.y"
{ yyval. string_type  = new std::string(lexer.YYText());;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_MSLParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_MSLParser_LLOC.first_line;
      yylsp->first_column = YY_MSLParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_MSLParser_NERRS;

#ifdef YY_MSLParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_MSLParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_MSLParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_MSLParser_ERROR_VERBOSE */
	YY_MSLParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_MSLParser_CHAR == YYEOF)
	YYABORT;

#if YY_MSLParser_DEBUG != 0
      if (YY_MSLParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_MSLParser_CHAR, yytname[yychar1]);
#endif

      YY_MSLParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_MSLParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_MSLParser_DEBUG != 0
  if (YY_MSLParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_MSLParser_LVAL;
#ifdef YY_MSLParser_LSP_NEEDED
  *++yylsp = YY_MSLParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 690 "Kernel/MSLParser.y"

